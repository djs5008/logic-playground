/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./public/js/lpg/core.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./public/js/lpg/appl/draw-controller.js":
/*!***********************************************!*\
  !*** ./public/js/lpg/appl/draw-controller.js ***!
  \***********************************************/
/*! exports provided: DrawController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawController\", function() { return DrawController; });\nclass DrawController {\r\n\r\n  /**\r\n   * Constructor for DrawController\r\n   */\r\n  constructor(stage, selectionController, moduleController, resourceController) {\r\n    // setup properties\r\n    this.stage = stage;\r\n    this.stage.setClearColor('#FFF');\r\n    this.flowOffset = 0;\r\n\r\n    // init dependent controllers\r\n    this.moduleController = moduleController;\r\n    this.selectionController = selectionController;\r\n    this.resourceController = resourceController;\r\n\r\n    // initialize double-buffering properties\r\n    this.buffer = new createjs.Shape();\r\n    this.graphics = this.buffer.graphics;\r\n    this.stage.addChild(this.buffer);\r\n\r\n    // resize canvas to window dims\r\n    this.fitStage = this.fitStage.bind(this);\r\n    window.addEventListener('resize', this.fitStage, false);\r\n    this.fitStage();\r\n  }\r\n\r\n  /**\r\n   * Resize the stage to fit within the window bounds (buffer cache gets updated on resize too)\r\n   */\r\n  fitStage() {\r\n    let SIZE_RATIO = (3 / 4);\r\n    this.stage.canvas.width = window.innerWidth * SIZE_RATIO;\r\n    this.stage.canvas.height = window.innerHeight * SIZE_RATIO;\r\n    this.stage.updateViewport(window.innerWidth * SIZE_RATIO, window.innerHeight * SIZE_RATIO);\r\n    this.buffer.uncache();\r\n    this.buffer.cache(0, 0, this.stage.canvas.width, this.stage.canvas.height);\r\n  }\r\n\r\n  /**\r\n   * Begin painting the scene\r\n   */\r\n  startPainting() {\r\n    this.paint = this.paint.bind(this);\r\n    createjs.Ticker.on('tick', this.paint);\r\n    createjs.Ticker.framerate = 65;\r\n  }\r\n\r\n  /**\r\n   * Initialize the animation timer\r\n   */\r\n  startAnimationTimer() {\r\n    let me = this;\r\n    let slideAmounts = {};\r\n\r\n    const ANIM_TIMER_INTERVAL = 10;\r\n    const MAX_FLOW_OFFSET = 20;\r\n    const FLOW_OFFSET_DELTA = 1.0;\r\n    const LERP_DELTA = 0.1;\r\n\r\n    setInterval(() =>  {\r\n      // Animate wire flow\r\n      me.flowOffset = (me.flowOffset < MAX_FLOW_OFFSET)\r\n        ? me.flowOffset + FLOW_OFFSET_DELTA\r\n        : FLOW_OFFSET_DELTA;\r\n\r\n      // Lerp slide bar\r\n      me.moduleController.activeModule.components.forEach(component => {\r\n        if (component.type === 'SWITCH-BUTTON') {\r\n          if (!slideAmounts[component.id]) {\r\n            slideAmounts[component.id] = 0.0;\r\n          }\r\n\r\n          let slideAmount = slideAmounts[component.id];\r\n          if (component.getState()) {\r\n            slideAmounts[component.id] = (slideAmount < 1.0) ? slideAmount + LERP_DELTA : 1.0;\r\n          } else {\r\n            slideAmounts[component.id] = (slideAmount > 0.0) ? slideAmount - LERP_DELTA : 0.0;\r\n          }\r\n          component.setSlideAmount(slideAmounts[component.id]);\r\n        }\r\n      });\r\n    }, ANIM_TIMER_INTERVAL);\r\n  }\r\n\r\n  /**\r\n   * Paint the canvas\r\n   */\r\n  paint() {\r\n    setTimeout(() => {\r\n      // clear before each frame\r\n      this.graphics.clear();\r\n\r\n      // draw layers\r\n      this.drawBackground();\r\n      this.drawGrid();\r\n      this.drawOrigin();\r\n      this.drawAllWires();\r\n      this.drawCurrentWire();\r\n      this.drawComponents();\r\n      this.drawConnectorSelection();\r\n      this.drawComponentSelections();\r\n      this.drawHoveredConnector();\r\n      this.drawHoveredComponent();\r\n      this.drawSelection();\r\n\r\n      // update buffer cache and stage after changes\r\n      this.buffer.updateCache();\r\n      this.stage.update();\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Draw the (white) background \r\n   *  (to allow for mouse events to be handled nicely)\r\n   */\r\n  drawBackground() {\r\n    const BG_COLORS = ['#FFF', '#DDD'];\r\n    const RATIOS = [0.5, 1.0];\r\n    this.graphics\r\n      .beginLinearGradientFill(BG_COLORS, RATIOS, 0, 0, 0, this.stage.canvas.height)\r\n      .rect(0, 0, this.stage.canvas.width, this.stage.canvas.height)\r\n      .endFill();\r\n  }\r\n\r\n  /**\r\n   * Draw the background grid\r\n   */\r\n  drawGrid() {\r\n    const GRID_GAP = 50;\r\n    const GRID_COLOR = '#CCC';\r\n    const LINE_GAP = GRID_GAP / 4;\r\n    let origin = this.moduleController.activeModule.startPos;\r\n\r\n    this.graphics.setStrokeDash([GRID_GAP / 2], 1);\r\n    // draw from top to bottom\r\n    for (let x = (origin.x % GRID_GAP); x < this.stage.canvas.width; x += GRID_GAP) {\r\n      this.graphics.beginStroke(GRID_COLOR)\r\n        .moveTo(x, (origin.y % GRID_GAP) - LINE_GAP)\r\n        .lineTo(x, this.stage.canvas.height)\r\n        .endStroke();\r\n    }\r\n    // draw from left to right\r\n    for (let y = (origin.y % GRID_GAP); y < this.stage.canvas.height; y += GRID_GAP) {\r\n      this.graphics.beginStroke(GRID_COLOR)\r\n        .moveTo((origin.x % GRID_GAP) - LINE_GAP, y)\r\n        .lineTo(this.stage.canvas.width, y)\r\n        .endStroke();\r\n    }\r\n    // reset stroke dash\r\n    this.graphics.setStrokeDash();\r\n  }\r\n\r\n  /**\r\n   * Draw the origin point\r\n   */\r\n  drawOrigin() {\r\n    const radius = 2;\r\n    let posX = this.moduleController.activeModule.startPos.x;\r\n    let posY = this.moduleController.activeModule.startPos.y;\r\n    this.graphics.beginFill('red')\r\n      .drawCircle(posX, posY, radius)\r\n      .endFill();\r\n  }\r\n\r\n  /**\r\n   * Draw each component in the active module\r\n   */\r\n  drawComponents() {\r\n    let me = this;\r\n    this.moduleController.activeModule.components.forEach((component) =>  {\r\n      let location = me.selectionController.getScreenCoords(component.bounds);\r\n      component.paint(me.graphics, location);\r\n\r\n      // draw components connectors\r\n      component.connectors.forEach((connector) =>  {\r\n        let connLocScreen = me.selectionController.getScreenCoords(connector.bounds);\r\n        connector.paint(me.graphics, connLocScreen);\r\n      });\r\n      \r\n    });\r\n  }\r\n\r\n  /**\r\n   * Draw a selection box around the currently hovered component in the active module\r\n   */\r\n  drawHoveredComponent() {\r\n    if (this.selectionController.getActiveState() === 'HOVER-COMPONENT') {\r\n      let hoveredComp = this.selectionController.getHoveredComponent();\r\n      if (hoveredComp !== null) {\r\n        let location = this.selectionController.getScreenCoords({ x: hoveredComp.bounds.x, y: hoveredComp.bounds.y });\r\n        const padding = 2;\r\n        this.graphics.beginFill('rgba(127,0,0,0.3)')\r\n          .drawRect(\r\n            location.x - (padding / 2),\r\n            location.y - (padding / 2),\r\n            hoveredComp.bounds.width + padding,\r\n            hoveredComp.bounds.height + padding)\r\n          .endFill()\r\n          .beginStroke('rgba(127,0,0,0.2)')\r\n          .setStrokeStyle(2)\r\n          .drawRect(\r\n            location.x - (padding / 2),\r\n            location.y - (padding / 2),\r\n            hoveredComp.bounds.width + padding,\r\n            hoveredComp.bounds.height + padding)\r\n          .endStroke();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw a \"selected\" box around each of the currently selected components\r\n   */\r\n  drawComponentSelections() {\r\n    let me = this;\r\n    this.selectionController.selectedComponents.forEach((component) =>  {\r\n      let location = me.selectionController.getScreenCoords({ x: component.bounds.x, y: component.bounds.y });\r\n      const padding = 2;\r\n      me.graphics.beginFill('rgba(150,0,0,0.3)')\r\n        .drawRect(\r\n          location.x - (padding / 2),\r\n          location.y - (padding / 2),\r\n          component.bounds.width + padding,\r\n          component.bounds.height + padding)\r\n        .endFill()\r\n        .beginStroke('rgba(150,0,0,0.4)')\r\n        .setStrokeStyle(2)\r\n        .drawRect(\r\n          location.x - (padding / 2),\r\n          location.y - (padding / 2),\r\n          component.bounds.width + padding,\r\n          component.bounds.height + padding)\r\n        .endStroke();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Draw the currently hovered-over connector\r\n   */\r\n  drawHoveredConnector() {\r\n    if (this.selectionController.getActiveState() === 'HOVER-CONNECTOR'\r\n        || this.selectionController.getActiveState() === 'CONNECTING') {\r\n      let hoveredConn = this.selectionController.getHoveredConnector();\r\n      if (hoveredConn !== null) {\r\n        let location = this.selectionController.getScreenCoords({ x: hoveredConn.bounds.x, y: hoveredConn.bounds.y });\r\n        this.graphics.beginFill('rgba(150,0,0,0.5)')\r\n          .drawCircle(location.x, location.y, hoveredConn.bounds.width)\r\n          .endFill()\r\n          .beginStroke('rgba(150,0,0,1)')\r\n          .setStrokeStyle(2)\r\n          .drawCircle(location.x, location.y, hoveredConn.bounds.width)\r\n          .endStroke();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw the previously selected connector\r\n   */\r\n  drawConnectorSelection() {\r\n    let selectedConnector = this.selectionController.getSelectedConnector();\r\n    if (selectedConnector !== null) {\r\n      let location = this.selectionController.getScreenCoords({ x: selectedConnector.bounds.x, y: selectedConnector.bounds.y });\r\n      this.graphics.beginFill('rgba(150,0,0,0.5)')\r\n        .drawCircle(location.x, location.y, selectedConnector.bounds.width)\r\n        .endFill()\r\n        .beginStroke('rgba(150,0,0,1)')\r\n        .setStrokeStyle(2)\r\n        .drawCircle(location.x, location.y, selectedConnector.bounds.width)\r\n        .endStroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw your current left mouse-drag selection\r\n   */\r\n  drawSelection() {\r\n    if (this.selectionController.getActiveState() === 'SELECTING') {\r\n      let selectionRect = this.selectionController.getSelectionRect();\r\n      this.graphics.beginFill('rgba(0,50,127,0.3)')\r\n        .drawRect(selectionRect.x, selectionRect.y, selectionRect.width, selectionRect.height)\r\n        .endFill()\r\n        .beginStroke('rgba(0,50,127,0.4)')\r\n        .setStrokeStyle(2)\r\n        .drawRect(selectionRect.x, selectionRect.y, selectionRect.width, selectionRect.height)\r\n        .endStroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw the wire that is currently being created (selectedConnector to mousePos)\r\n   */\r\n  drawCurrentWire() {\r\n    let selectedConnector = this.selectionController.getSelectedConnector();\r\n    if (selectedConnector !== null) {\r\n      let connLocation = this.selectionController.getScreenCoords(selectedConnector.bounds);\r\n      let mouseLocation = this.selectionController.getMouseLoc();\r\n      this.graphics.beginStroke('rgb(0,0,0)')\r\n        .setStrokeStyle(4)\r\n        .moveTo(connLocation.x, connLocation.y)\r\n        .lineTo(mouseLocation.x, mouseLocation.y)\r\n        .endStroke()\r\n        .setStrokeStyle();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw all of the wires in the activeModule based on the ModuleController's connector map\r\n   */\r\n  drawAllWires() {\r\n    let me = this;\r\n    const FLOW_GAP = 10;\r\n    const LINE_SIZE = 6;\r\n    const FLOW_SIZE = LINE_SIZE - 3;\r\n    Object.keys(me.moduleController.activeModule.getConnectorMap()).forEach((inConnID) =>  {\r\n      let inConn = me.moduleController.activeModule.getConnector(inConnID);\r\n      let inConnLoc = me.selectionController.getScreenCoords(inConn.bounds);\r\n      me.moduleController.activeModule.getConnectorMap()[inConnID].forEach((outConn) =>  {\r\n        let outConnLoc = me.selectionController.getScreenCoords(outConn.bounds);\r\n        let color = outConn.getState() ? 'rgb(0,100,0)' : 'rgb(50,0,0)';\r\n        let curvePadding = 30;\r\n        me.graphics.beginStroke(color)\r\n          .setStrokeStyle(LINE_SIZE)\r\n          .moveTo(outConnLoc.x, outConnLoc.y)\r\n          .bezierCurveTo(outConnLoc.x + curvePadding, outConnLoc.y, inConnLoc.x - curvePadding, inConnLoc.y, inConnLoc.x, inConnLoc.y)\r\n          .endStroke()\r\n          .setStrokeStyle();\r\n        if (outConn.getState()) {\r\n          me.graphics.beginStroke('rgb(0,200,0)')\r\n            .setStrokeStyle(FLOW_SIZE)\r\n            .setStrokeDash([FLOW_GAP], -me.flowOffset)\r\n            .moveTo(outConnLoc.x, outConnLoc.y)\r\n            .bezierCurveTo(outConnLoc.x + curvePadding, outConnLoc.y, inConnLoc.x - curvePadding, inConnLoc.y, inConnLoc.x, inConnLoc.y)\r\n            .endStroke()\r\n            .setStrokeStyle()\r\n            .setStrokeDash();\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/appl/draw-controller.js?");

/***/ }),

/***/ "./public/js/lpg/appl/file-controller.js":
/*!***********************************************!*\
  !*** ./public/js/lpg/appl/file-controller.js ***!
  \***********************************************/
/*! exports provided: FileController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FileController\", function() { return FileController; });\nclass FileController {\r\n\r\n  /**\r\n   * Construct FileController\r\n   * \r\n   * @param {*} moduleController ModuleController instance\r\n   */\r\n  constructor(moduleController) {\r\n    this.moduleController = moduleController;\r\n  }\r\n\r\n  /**\r\n   * Save the currently active module into your localStorage\r\n   */\r\n  saveActiveModule() {\r\n    this.moduleController.activeModule.label = $('#module-name').val();\r\n    console.log(JSON.stringify(this.moduleController.activeModule));\r\n    localStorage.setItem('autosaveModule', JSON.stringify(this.moduleController.activeModule));\r\n  }\r\n\r\n  /**\r\n   * Load a previously-saved modules from localStorage\r\n   *  If a save is not found, load a new module\r\n   */\r\n  loadSavedModule() {\r\n    if (localStorage.autosaveModule) {\r\n      console.info('loading saved module...');\r\n      let savedModule = JSON.parse(localStorage.autosaveModule);\r\n      this.moduleController.setActiveModule(this.moduleController.loadModule(savedModule));\r\n      console.info('saved module loaded!');\r\n    } else {\r\n      this.moduleController.newModule();\r\n    }\r\n\r\n    // Update Module Settings properties\r\n    $('#module-name').val(this.moduleController.activeModule.label);\r\n  }\r\n\r\n  /**\r\n   * Export (download) the active module into a *.lpm file\r\n   */\r\n  exportActiveModule() {\r\n    const content = JSON.stringify(this.moduleController.activeModule);\r\n    const filename = this.moduleController.activeModule.label + '.lpm';\r\n\r\n    var file = new Blob([content], { type: 'application/octet-stream' });\r\n    $('#export-module-dialog').attr('href', URL.createObjectURL(file));\r\n    $('#export-module-dialog').attr('download', filename);\r\n    $('#export-module-dialog').get(0).dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, view: window }));\r\n  }\r\n\r\n  /**\r\n   * Load a module file for either importing or loading the active module\r\n   * \r\n   * @param {boolean} isImport \r\n   */\r\n  loadModuleFile(callback) {\r\n    var me = this;\r\n\r\n    console.log('loading file');\r\n\r\n    // Spoof a click on the file input\r\n    $('#load-module-dialog').get(0).dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, view: window }));\r\n\r\n    // Reset file input on click (chrome)\r\n    $('#load-module-dialog').click(() =>  {\r\n      $('#load-module-dialog').get(0).value = null;\r\n    });\r\n\r\n    // On input change\r\n    $('#load-module-dialog').on('change', () =>  {\r\n      var files = document.getElementById('load-module-dialog').files;\r\n\r\n      if (!files.length && files.length === 1) {\r\n        alert('Please select an LPM file!');\r\n        return;\r\n      }\r\n\r\n      // ensure file is compatible\r\n      var file = files[0];\r\n\r\n      // Check for valid file name\r\n      if (!file.name.includes('.lpm')) {\r\n        alert('Please select a valid .lpm file!');\r\n        return;\r\n      }\r\n\r\n      // Setup filereader callback\r\n      var reader = new FileReader();\r\n      reader.onloadend = (evt) =>  {\r\n        if (evt.target.readyState == FileReader.DONE) {\r\n          callback(me, evt.target.result);\r\n        }\r\n      };\r\n\r\n      // begin reading file blob\r\n      var blob = file.slice(0, file.size);\r\n      reader.readAsText(blob);\r\n\r\n      return false;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Load a *.lpm file into the active module\r\n   * \r\n   * @param {*} moduleData The JSON-data from the loaded module file\r\n   */\r\n  loadModule(me, moduleData) {\r\n    console.info('loading module...');\r\n    // Update active module based on result of file\r\n    me.moduleController.setActiveModule(me.moduleController.loadModule(JSON.parse(moduleData)));\r\n\r\n    // Update Module Settings properties\r\n    $('#module-name').val(me.moduleController.activeModule.label);\r\n  }\r\n\r\n  /**\r\n   * Import a module into session data to be used as embedded modules within the active module\r\n   * \r\n   * @param {*} moduleData The JSON-data from the loaded module file\r\n   */\r\n  importModule(me, moduleData) {\r\n    console.info('importing module...');\r\n    // setup array\r\n    if (!sessionStorage.importedModules) {\r\n      sessionStorage.setItem('importedModules', JSON.stringify([]));\r\n    }\r\n\r\n    // add imported module to session storage\r\n    var arr = JSON.parse(sessionStorage.importedModules);\r\n    arr.push(moduleData);\r\n    sessionStorage.setItem('importedModules', JSON.stringify(arr));\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/appl/file-controller.js?");

/***/ }),

/***/ "./public/js/lpg/appl/module-controller.js":
/*!*************************************************!*\
  !*** ./public/js/lpg/appl/module-controller.js ***!
  \*************************************************/
/*! exports provided: ModuleController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ModuleController\", function() { return ModuleController; });\n/* harmony import */ var _model_types_misc_connector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/types/misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _model_types_misc_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/types/misc/module */ \"./public/js/lpg/model/types/misc/module.js\");\n/* harmony import */ var _model_types_gates_and_gate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/types/gates/and-gate */ \"./public/js/lpg/model/types/gates/and-gate.js\");\n/* harmony import */ var _model_types_gates_nand_gate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/types/gates/nand-gate */ \"./public/js/lpg/model/types/gates/nand-gate.js\");\n/* harmony import */ var _model_types_gates_or_gate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../model/types/gates/or-gate */ \"./public/js/lpg/model/types/gates/or-gate.js\");\n/* harmony import */ var _model_types_gates_nor_gate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../model/types/gates/nor-gate */ \"./public/js/lpg/model/types/gates/nor-gate.js\");\n/* harmony import */ var _model_types_gates_xor_gate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../model/types/gates/xor-gate */ \"./public/js/lpg/model/types/gates/xor-gate.js\");\n/* harmony import */ var _model_types_gates_xnor_gate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../model/types/gates/xnor-gate */ \"./public/js/lpg/model/types/gates/xnor-gate.js\");\n/* harmony import */ var _model_types_gates_not_gate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../model/types/gates/not-gate */ \"./public/js/lpg/model/types/gates/not-gate.js\");\n/* harmony import */ var _model_types_inputs_switch_button__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../model/types/inputs/switch-button */ \"./public/js/lpg/model/types/inputs/switch-button.js\");\n/* harmony import */ var _model_types_inputs_hold_button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../model/types/inputs/hold-button */ \"./public/js/lpg/model/types/inputs/hold-button.js\");\n/* harmony import */ var _model_types_inputs_clock__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../model/types/inputs/clock */ \"./public/js/lpg/model/types/inputs/clock.js\");\n/* harmony import */ var _model_types_outputs_led__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../model/types/outputs/led */ \"./public/js/lpg/model/types/outputs/led.js\");\n/* harmony import */ var _model_types_outputs_seven_seg_disp__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../model/types/outputs/seven-seg-disp */ \"./public/js/lpg/model/types/outputs/seven-seg-disp.js\");\n/* harmony import */ var _model_types_outputs_console__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../model/types/outputs/console */ \"./public/js/lpg/model/types/outputs/console.js\");\n// MISC\r\n\r\n\r\n\r\n// GATES\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// INPUTS\r\n\r\n\r\n\r\n\r\n\r\n// OUTPUTS\r\n\r\n\r\n\r\n\r\n// \r\n// Constants\r\n// \r\nconst LOGIC_INTERVAL_MS = 1;\r\n\r\nclass ModuleController {\r\n\r\n  /**\r\n   * ModuleController constructor\r\n   */\r\n  constructor(resourceController) {\r\n    this.activeModule = undefined;\r\n    this.activeModules = [];\r\n    this.resourceController = resourceController;\r\n  }\r\n\r\n  /**\r\n   * Initialize the flow of logic\r\n   *  This is the base of all bit-flow transactions\r\n   */\r\n  startLogicTimer() {\r\n    var me = this;\r\n\r\n    // Start simulating the logic flow\r\n    setInterval(() =>  {\r\n      if (me.activeModule !== undefined) {\r\n        me.activeModule.propagate(true);\r\n      }\r\n    }, LOGIC_INTERVAL_MS);\r\n  }\r\n\r\n  /**\r\n   * Establish a new activeModule (used by selection & draw controllers)\r\n   */\r\n  newModule() {\r\n    this.setActiveModule(new _model_types_misc_module__WEBPACK_IMPORTED_MODULE_1__[\"Module\"](new createjs.Rectangle(0, 0)));\r\n  }\r\n\r\n  /**\r\n   * Set the active module\r\n   */\r\n  setActiveModule(activeModule) {\r\n    this.activeModule = activeModule;\r\n    this.activeModule.updateConnectorMap();\r\n  }\r\n\r\n  /**\r\n   * Load a module by copying old modules (and it's components) attributes to newly created one\r\n   * \r\n   * @param {Module} mod The json-parsed module object (prototypes not assigned) \r\n   */\r\n  loadModule(mod) {\r\n    let loadedModule = new _model_types_misc_module__WEBPACK_IMPORTED_MODULE_1__[\"Module\"](new createjs.Rectangle(0, 0));\r\n    let me = this;\r\n\r\n    let loadConnector = (conn) => {\r\n      let loadedConnector = new _model_types_misc_connector__WEBPACK_IMPORTED_MODULE_0__[\"Connector\"](conn.bounds, conn.type);\r\n\r\n      // Copy connectors attributes to new connector  \r\n      for (var attr in conn) loadedConnector[attr] = conn[attr];\r\n      \r\n      // Copy bounds into new rectangle instance\r\n      loadedConnector.bounds = new createjs.Rectangle(conn.bounds.x, conn.bounds.y, conn.bounds.width, conn.bounds.height);\r\n\r\n      return loadedConnector;\r\n    };\r\n\r\n    let loadComponent = (comp) => {\r\n      let loadedComponent = null;\r\n\r\n      if (comp.type === 'MODULE') {\r\n        // Recursively load this component as a module\r\n        loadedComponent = me.loadModule(comp);\r\n      } else {\r\n        loadedComponent = me.createComponent(comp.type, comp.bounds);\r\n\r\n        // Copy components attributes to new component\r\n        for (var attr in comp) loadedComponent[attr] = comp[attr];\r\n      }\r\n\r\n      // Copy bounds into new rectangle instance\r\n      loadedComponent.bounds = new createjs.Rectangle(comp.bounds.x, comp.bounds.y, comp.bounds.width, comp.bounds.height);\r\n\r\n      // Clear copied connectors and re-push newly instantiated ones\r\n      loadedComponent.connectors = [];\r\n      comp.connectors.forEach((conn) => loadedComponent.connectors.push(loadConnector(conn)));\r\n\r\n      return loadedComponent;\r\n    };\r\n\r\n    // Copy old modules attributes to new module\r\n    for (var attr in mod) loadedModule[attr] = mod[attr];\r\n\r\n    // Overwrite bounds with new Rectangle instance\r\n    loadedModule.bounds = new createjs.Rectangle(mod.bounds.x, mod.bounds.y, mod.bounds.width, mod.bounds.height);\r\n\r\n    // Load connectors for this module\r\n    // Clear copied connectors and re-push newly instantiated ones\r\n    loadedModule.connectors = [];\r\n    mod.connectors.forEach((conn) => loadedModule.connectors.push(loadConnector(conn)));\r\n\r\n    // Clear copied components and re-push newly instantiated ones\r\n    loadedModule.components = [];\r\n    mod.components.forEach((comp) => loadedModule.components.push(loadComponent(comp)));\r\n\r\n    loadedModule.updateBounds();\r\n\r\n    return loadedModule;\r\n  }\r\n\r\n  /**\r\n   * Instantiate a component based on a privided (string) type\r\n   * \r\n   * @param {string} type The type of component being instantiated\r\n   * @param {*} args The arguments provided to the component creation\r\n   */\r\n  createComponent(type, args) {\r\n    switch (type.toUpperCase()) {\r\n      case 'CONNECTOR': return new _model_types_misc_connector__WEBPACK_IMPORTED_MODULE_0__[\"Connector\"](args);\r\n      case 'MODULE': return new _model_types_misc_module__WEBPACK_IMPORTED_MODULE_1__[\"Module\"](args);\r\n      case 'AND-GATE': return new _model_types_gates_and_gate__WEBPACK_IMPORTED_MODULE_2__[\"ANDGate\"](args, this.resourceController.getResource('and-gate'));\r\n      case 'NAND-GATE': return new _model_types_gates_nand_gate__WEBPACK_IMPORTED_MODULE_3__[\"NANDGate\"](args, this.resourceController.getResource('nand-gate'));\r\n      case 'OR-GATE': return new _model_types_gates_or_gate__WEBPACK_IMPORTED_MODULE_4__[\"ORGate\"](args, this.resourceController.getResource('or-gate'));\r\n      case 'NOR-GATE': return new _model_types_gates_nor_gate__WEBPACK_IMPORTED_MODULE_5__[\"NORGate\"](args, this.resourceController.getResource('nor-gate'));\r\n      case 'XOR-GATE': return new _model_types_gates_xor_gate__WEBPACK_IMPORTED_MODULE_6__[\"XORGate\"](args, this.resourceController.getResource('xor-gate'));\r\n      case 'XNOR-GATE': return new _model_types_gates_xnor_gate__WEBPACK_IMPORTED_MODULE_7__[\"XNORGate\"](args, this.resourceController.getResource('xnor-gate'));\r\n      case 'NOT-GATE': return new _model_types_gates_not_gate__WEBPACK_IMPORTED_MODULE_8__[\"NOTGate\"](args, this.resourceController.getResource('not-gate'));\r\n      case 'HOLD-BUTTON': return new _model_types_inputs_hold_button__WEBPACK_IMPORTED_MODULE_10__[\"HoldButton\"](args);\r\n      case 'SWITCH-BUTTON': return new _model_types_inputs_switch_button__WEBPACK_IMPORTED_MODULE_9__[\"SwitchButton\"](args);\r\n      case 'CLOCK': return new _model_types_inputs_clock__WEBPACK_IMPORTED_MODULE_11__[\"Clock\"](args);\r\n      case 'LED': return new _model_types_outputs_led__WEBPACK_IMPORTED_MODULE_12__[\"LED\"](args);\r\n      case 'SEVEN-SEG-DISP': return new _model_types_outputs_seven_seg_disp__WEBPACK_IMPORTED_MODULE_13__[\"SevenSegDisp\"](args);\r\n      case 'CONSOLE': return new _model_types_outputs_console__WEBPACK_IMPORTED_MODULE_14__[\"Console\"](args);\r\n      default:\r\n        alert('Invalid component type: \"' + type + '\"');\r\n        return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load a module from your \"imported modules\" area\r\n   *  This will load the module and add it as a component in the active module\r\n   * \r\n   * @param {Module} mod The pre-parsed module object\r\n   */\r\n  importModule(mod, bounds) {\r\n    this.refreshConnectors(mod);\r\n    this.activeModule.addComponent(mod);\r\n    mod.bounds = bounds;\r\n    mod.updateBounds();\r\n    mod.propagate();\r\n    this.activeModule.updateConnectorMap();\r\n    return mod;\r\n  }\r\n\r\n  /**\r\n   * Re-load component connector IDs to new UUIDs\r\n   * \r\n   * @param {*} component The component being refreshed\r\n   */\r\n  refreshConnectors(component) {\r\n    component.connectors.forEach((conn) => {\r\n      conn.id = uuid();\r\n    });\r\n    this.activeModule.updateConnectorMap();\r\n  }\r\n\r\n  /**\r\n   * Add a component to the activeModule\r\n   * \r\n   * @param {string} type Type component type being added to the activeModule\r\n   * @param {createjs.Point} bounds The real-bounds of the component to be added to the activeModule\r\n   */\r\n  addComponent(type, bounds) {\r\n    var comp = this.createComponent(type, bounds);\r\n\r\n    if (comp !== null) {\r\n      return this.activeModule.addComponent(comp);\r\n    }\r\n\r\n    this.activeModule.updateConnectorMap();\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Break a connector (disassociate it's connections map)\r\n   *  This will also set all connectors it was associated to default (off) value\r\n   *  If the connector is supposed to be on, it will get picked up by the logic clock\r\n   * \r\n   * @param {*} connector The connector being broken on\r\n   */\r\n  breakConnections(connector) {\r\n    var me = this;\r\n    \r\n    // Break all of output's connections\r\n    if (connector.isInput()) {\r\n      connector.connections.forEach((connectionID) =>  {\r\n        var connFrom = me.activeModule.getConnector(connectionID);\r\n        connector.removeConnection(connFrom);\r\n      });\r\n    }\r\n\r\n    // Find all of input's output connectors and remove input from it\r\n    else {\r\n      me.activeModule.components.forEach((component) =>  {\r\n        component.connectors.forEach((conn) =>  {\r\n          if (conn.isInput()) {\r\n            conn.connections.forEach((connID) =>  {\r\n              if (connID === connector.getID()) {\r\n                conn.removeConnection(me.activeModule.getConnector(connector.getID()));\r\n              }\r\n            });\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    this.activeModule.updateConnectorMap();\r\n  }\r\n\r\n  /**\r\n   * Remove a component from the activeModule\r\n   *  This will automatically break desired component's connectors\r\n   * \r\n   * @param {*} mod The module the component is being deleted from\r\n   * @param {*} component The component being deleted\r\n   */\r\n  deleteComponent(mod, component) {\r\n    var me = this;\r\n\r\n    // Break all connectors leading to this component\r\n    component.connectors.forEach((connector) =>  {\r\n      me.breakConnections(connector);\r\n    });\r\n\r\n    mod.removeComponent(component);\r\n\r\n    mod.updateConnectorMap();\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/appl/module-controller.js?");

/***/ }),

/***/ "./public/js/lpg/appl/resource-controller.js":
/*!***************************************************!*\
  !*** ./public/js/lpg/appl/resource-controller.js ***!
  \***************************************************/
/*! exports provided: ResourceController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ResourceController\", function() { return ResourceController; });\nclass ResourceController {\n\n  constructor() {\n    this.resourceQueue = new createjs.LoadQueue(true, 'img/lpg/');\n  }\n\n  /**\n   * Load required resources\n   */\n  loadResources(callback) {\n    console.info('loading resources...');\n    this.resourceQueue.loadManifest([\n      {'src': 'and-gate.png', 'id':'and-gate'},\n      {'src': 'nand-gate.png', 'id':'nand-gate'},\n      {'src': 'or-gate.png', 'id':'or-gate'},\n      {'src': 'nor-gate.png', 'id':'nor-gate'},\n      {'src': 'xor-gate.png', 'id':'xor-gate'},\n      {'src': 'xnor-gate.png', 'id':'xnor-gate'},\n      {'src': 'not-gate.png', 'id':'not-gate'}\n    ], true);\n    this.resourceQueue.on('complete', callback);\n  }\n\n  /**\n   * Retrieve a loaded resource file by name\n   * \n   * @param {string} name The name of the resource\n   */\n  getResource(name) {\n    return this.resourceQueue.getResult(name);\n  }\n\n}\n\n//# sourceURL=webpack:///./public/js/lpg/appl/resource-controller.js?");

/***/ }),

/***/ "./public/js/lpg/appl/selection-controller.js":
/*!****************************************************!*\
  !*** ./public/js/lpg/appl/selection-controller.js ***!
  \****************************************************/
/*! exports provided: SelectionController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SelectionController\", function() { return SelectionController; });\n/* harmony import */ var _selection_states_empty_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selection-states/empty-state */ \"./public/js/lpg/appl/selection-states/empty-state.js\");\n/* harmony import */ var _selection_states_hover_connector_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selection-states/hover-connector-state */ \"./public/js/lpg/appl/selection-states/hover-connector-state.js\");\n/* harmony import */ var _selection_states_hover_component_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selection-states/hover-component-state */ \"./public/js/lpg/appl/selection-states/hover-component-state.js\");\n/* harmony import */ var _selection_states_panning_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selection-states/panning-state */ \"./public/js/lpg/appl/selection-states/panning-state.js\");\n/* harmony import */ var _selection_states_selecting_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./selection-states/selecting-state */ \"./public/js/lpg/appl/selection-states/selecting-state.js\");\n/* harmony import */ var _selection_states_dragging_state__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./selection-states/dragging-state */ \"./public/js/lpg/appl/selection-states/dragging-state.js\");\n/* harmony import */ var _selection_states_connecting_state__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./selection-states/connecting-state */ \"./public/js/lpg/appl/selection-states/connecting-state.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// \r\n// Constants\r\n// \r\nconst LEFT_CLICK_ID = 0;\r\nconst RIGHT_CLICK_ID = 2;\r\n\r\nclass SelectionController {\r\n\r\n  /**\r\n   * SelectionController constructor\r\n   * \r\n   * @param {createjs.StageGL} stage \r\n   * @param {ModuleController} moduleController \r\n   */\r\n  constructor(stage, moduleController) {\r\n    this.stage = stage;             // EaselJS CanvasGL instance\r\n    this.moduleController =\r\n      moduleController;             // Instance of ModuleController passed by Core\r\n    this.activeState = null;\r\n      \r\n    this.activeClick = null;        // Type of click stored currently (check IDs above)\r\n    this.selectionRect = \r\n      new createjs.Rectangle();     // Current selection rectangle\r\n    this.selectedComponents = [];   // Finalized list of currently selected components\r\n    this.selectedConnector = null;  // Instance of previously selected connector\r\n\r\n    this.hoveredConn = null;    // Store the currently hovered connector\r\n    this.hoveredComp = null;    // Store the currently hovered component\r\n\r\n    // NOTE: All coordinates are stored in canvas-relative coordinates\r\n    //        and can be converted to real coordinates using getRealCoords()\r\n    this.clickPos = null;               // Position of click (reset on mouseup)\r\n    this.mousePos = null;               // Position of mouse\r\n  }\r\n\r\n  /**\r\n   * Set the current state to handle state-specific behavior\r\n   *  Each state will dispatch and handle appropriate behavior based on that state\r\n   */\r\n  setActiveState(state, args) {\r\n    switch (state) {\r\n      case 'EMPTY': this.activeState = new _selection_states_empty_state__WEBPACK_IMPORTED_MODULE_0__[\"EmptyState\"](this); break;\r\n      case 'PANNING': this.activeState = new _selection_states_panning_state__WEBPACK_IMPORTED_MODULE_3__[\"PanningState\"](this); break;\r\n      case 'SELECTING': this.activeState = new _selection_states_selecting_state__WEBPACK_IMPORTED_MODULE_4__[\"SelectingState\"](this); break;\r\n      case 'HOVER-COMPONENT': this.activeState = new _selection_states_hover_component_state__WEBPACK_IMPORTED_MODULE_2__[\"HoverComponentState\"](this, args); break;\r\n      case 'HOVER-CONNECTOR': this.activeState = new _selection_states_hover_connector_state__WEBPACK_IMPORTED_MODULE_1__[\"HoverConnectorState\"](this, args); break;\r\n      case 'DRAGGING': this.activeState = new _selection_states_dragging_state__WEBPACK_IMPORTED_MODULE_5__[\"DraggingState\"](this); break;\r\n      case 'CONNECTING': this.activeState = new _selection_states_connecting_state__WEBPACK_IMPORTED_MODULE_6__[\"ConnectingState\"](this, args); break;\r\n    }\r\n    this.activeState.name = state;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the label for the active state\r\n   *  This DOES NOT retrieve the current active state instance\r\n   *  Use \"activeState\" property to retrieve instance of active state\r\n   */\r\n  getActiveState() {\r\n    return this.activeState.name;\r\n  }\r\n\r\n  /**\r\n   * Function to setup mouse-event handlings\r\n   */\r\n  initMouseEvents() {\r\n    let me = this;\r\n\r\n    // handle mouse presses\r\n    me.stage.on('stagemousedown', (evt) => {\r\n      me.activeClick = evt.nativeEvent.button;\r\n      me.clickPos = new createjs.Point(evt.stageX, evt.stageY );\r\n\r\n      // right/left mouse down event handling\r\n      if (me.isLeftClicking()) {\r\n        me.activeState.handleLeftClickDown(evt);\r\n      } else if (me.isRightClicking()) {\r\n        me.activeState.handleRightClickDown(evt);\r\n      }\r\n    });\r\n\r\n    // handle mouse releases\r\n    me.stage.on('stagemouseup', (evt) => {\r\n\r\n      // right/left mouse up event handling\r\n      if (me.isLeftClicking()) {\r\n        me.activeState.handleLeftClickUp(evt);\r\n      } else if (me.isRightClicking()) {\r\n        me.activeState.handleRightClickUp(evt);\r\n      }\r\n\r\n      // Reset selection properties\r\n      me.activeClick = null;\r\n      me.clickPos = null;\r\n    });\r\n\r\n    // handle mouse movement\r\n    me.stage.on('stagemousemove', (evt) => {\r\n      // Update stored mouse position\r\n      me.mousePos = new createjs.Point(evt.stageX, evt.stageY);\r\n\r\n      // handle general mouse move events\r\n      me.activeState.handleMouseMove(evt);\r\n\r\n      // right/left mouse drag event handling\r\n      if (me.isLeftClicking()) {\r\n        me.activeState.handleMouseDragLeft(evt);\r\n      } else if (me.isRightClicking()) {\r\n        me.activeState.handleMouseDragRight(evt);\r\n      }\r\n    });\r\n\r\n    // Handle double clicking on embedded module\r\n    me.stage.on('dblclick', (evt) => {\r\n      me.activeState.handleDoubleClick(evt);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieve the currently hovered component in the active module\r\n   */\r\n  getHoveredComponent() {\r\n    let me = this;\r\n    let hoveredComp = null;\r\n    if (me.mousePos !== null && me.hoveredConn === null) {\r\n      me.moduleController.activeModule.components.forEach((component) => {\r\n        let mousePosReal = me.getRealCoords(me.mousePos);\r\n        if (component.bounds.contains(mousePosReal.x, mousePosReal.y)) {\r\n          hoveredComp = component;\r\n          return false;\r\n        }\r\n      });\r\n    }\r\n    return hoveredComp;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the currently hovered connector in the active module\r\n   */\r\n  getHoveredConnector() {\r\n    let me = this;\r\n    let hoveredConn = null;\r\n    if (me.mousePos !== null) {\r\n      me.moduleController.activeModule.components.forEach((component) => {\r\n        if (hoveredConn !== null) return false;\r\n        let mousePosReal = me.getRealCoords(me.mousePos);\r\n        component.getConnectors().forEach((connector) => {\r\n          let width = connector.getRealBounds().width;\r\n          let height = connector.getRealBounds().height;\r\n          let wideBounds = new createjs.Rectangle(\r\n            connector.getRealBounds().x - (width / 2),\r\n            connector.getRealBounds().y - (height / 2),\r\n            connector.getRealBounds().width * 2,\r\n            connector.getRealBounds().height * 2\r\n          );\r\n          if (wideBounds.contains(mousePosReal.x, mousePosReal.y)) {\r\n            hoveredConn = connector;\r\n            return false;\r\n          }\r\n        });\r\n      });\r\n    }\r\n    return hoveredConn;\r\n  }\r\n\r\n  /**\r\n   * Retrieve an array of currently selected components\r\n   */\r\n  getSelectedComponents() {\r\n    let me = this;\r\n    let selectedComps = [];\r\n    if (me.selectionRect !== null) {\r\n      me.moduleController.activeModule.components.forEach((component) => {\r\n        let selectionPosReal = me.getRealCoords({ x: me.selectionRect.x, y: me.selectionRect.y });\r\n        let selectionRect = \r\n          new createjs.Rectangle(\r\n            selectionPosReal.x, \r\n            selectionPosReal.y, \r\n            me.selectionRect.width, \r\n            me.selectionRect.height);\r\n        if (component.bounds.intersects(selectionRect)) {\r\n          selectedComps.push(component);\r\n        }\r\n      });\r\n    }\r\n    return selectedComps;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the currently selected connector\r\n   */\r\n  getSelectedConnector() {\r\n    return this.selectedConnector;\r\n  }\r\n\r\n  /**\r\n   * Re-form the selection box around all of the selected components\r\n   */\r\n  wrapSelection() {\r\n    let me = this;\r\n    let minX = this.selectionRect.x + this.selectionRect.width;\r\n    let minY = this.selectionRect.y + this.selectionRect.height;\r\n    let maxX = this.selectionRect.x;\r\n    let maxY = this.selectionRect.y;\r\n    me.selectedComponents.forEach((component) => {\r\n      let screenPos = me.getScreenCoords(component.bounds);\r\n      minX = (screenPos.x <= minX) ? screenPos.x : minX;\r\n      minY = (screenPos.y <= minY) ? screenPos.y : minY;\r\n      maxX = (screenPos.x + component.bounds.width >= maxX) ? screenPos.x + component.bounds.width : maxX;\r\n      maxY = (screenPos.y + component.bounds.height >= maxY) ? screenPos.y + component.bounds.height : maxY;\r\n    });\r\n    me.selectionRect = new createjs.Rectangle(minX, minY, maxX - minX, maxY - minY);\r\n  }\r\n\r\n  /**\r\n   * Clear the current selection and reset selection state\r\n   */\r\n  clearSelection() {\r\n    this.selectionRect = new createjs.Rectangle();\r\n    this.selectedComponents = [];\r\n    this.toggleComponentSettings(false);\r\n  }\r\n\r\n  /**\r\n   * Toggle between component and module settings box\r\n   * @param {boolean} visible \r\n   */\r\n  toggleComponentSettings(visible) {\r\n    $('#component-controls').css('visibility', visible ? 'visible' : 'hidden');\r\n    $('#module-controls').css('visibility', visible ? 'hidden' : 'visible');\r\n  }\r\n\r\n  /**\r\n   * Show the component selection menu\r\n   */\r\n  showComponentSelection() {\r\n    // show single piece settings\r\n    let label = (this.selectedComponents[0].label === '') \r\n      ? 'no label' \r\n      : this.selectedComponents[0].label;\r\n    this.toggleComponentSettings(true);\r\n    $('#component-name').val(label);\r\n    this.selectedComponents[0].loadSettings($('#component-control-loader'));\r\n  }\r\n\r\n  /**\r\n   * Helper function to determine whether the user is currently holding left-click\r\n   */\r\n  isLeftClicking() {\r\n    return this.activeClick === LEFT_CLICK_ID;\r\n  }\r\n\r\n  /**\r\n   * Helper function to determine whether the user is currently holding right-click\r\n   */\r\n  isRightClicking() {\r\n    return this.activeClick === RIGHT_CLICK_ID;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the current mouse location on stage\r\n   */\r\n  getMouseLoc() {\r\n    return this.mousePos;\r\n  }\r\n\r\n  /**\r\n   * Retrieve an instance of the current selection bounds\r\n   */\r\n  getSelectionRect() {\r\n    return this.selectionRect;\r\n  }\r\n\r\n  /**\r\n   * Helper function to retrieve real-coordinates based on canvas-coordinates\r\n   * @param { x: canvas x-coord, y: canvas y-coord } canvasPos\r\n   * @returns { x: real x-coord, y: real y-coord }\r\n   */\r\n  getRealCoords(canvasPos) {\r\n    let origin = this.moduleController.activeModule.startPos;\r\n    return { x: canvasPos.x - origin.x, y: canvasPos.y - origin.y };\r\n  }\r\n\r\n  /**\r\n   * Helper function to retrieve canvas-coordinates from real-coordinates\r\n   * @param { x: real x-coord, y: real y-coord } realPos\r\n   * @returns { x: canvas x-coord, y: canvas y-coord }\r\n   */\r\n  getScreenCoords(realPos) {\r\n    let origin = this.moduleController.activeModule.startPos;\r\n    return { x: realPos.x + origin.x, y: realPos.y + origin.y };\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/appl/selection-controller.js?");

/***/ }),

/***/ "./public/js/lpg/appl/selection-states/connecting-state.js":
/*!*****************************************************************!*\
  !*** ./public/js/lpg/appl/selection-states/connecting-state.js ***!
  \*****************************************************************/
/*! exports provided: ConnectingState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConnectingState\", function() { return ConnectingState; });\nclass ConnectingState {\n\n  constructor(context, selectedConn) {\n    this.context = context;\n    this.selectedConn = selectedConn;\n    this.context.selectedConnector = selectedConn;\n    this.hoveredConn = null;\n    this.hoveredSSD = null;\n  }\n\n  /**\n   * Handle mouse movement events\n   */\n  handleMouseMove() {\n    this.hoveredConn = this.context.getHoveredConnector();\n\n    // Highlight hovered connector state on SEVEN-SEG-DISP\n    // TODO : change this to be less-specific\n    if (this.hoveredConn !== null) {\n      let hoveredConnComp = this.context.moduleController.activeModule.getComponent(this.hoveredConn);\n      if (hoveredConnComp !== null && hoveredConnComp.type === 'SEVEN-SEG-DISP') {\n        hoveredConnComp.setHoveredConnector(this.hoveredConn);\n        this.hoveredSSD = hoveredConnComp;\n      }\n    } else {\n      // Reset SEVEN-SEG-DISP hovered state\n      if (this.hoveredSSD !== null) {\n        this.hoveredSSD.setHoveredConnector(null);\n        this.hoveredSSD = null;\n      }\n    }\n  }\n\n  /**\n   * Handle left-click mouse dragging\n   */\n  handleMouseDragLeft() {}\n\n  /**\n   * Handle right-click mouse dragging\n   */\n  handleMouseDragRight() {}\n\n  /**\n   * Handle left-click down events\n   */\n  handleLeftClickDown() {}\n\n  /**\n   * Handle right-click down events\n   */\n  handleRightClickDown() {}\n\n  /**\n   * Handle left-click up events\n   */\n  handleLeftClickUp() {\n    let hoveredConn = this.hoveredConn;\n    if (hoveredConn !== null) {\n      if (this.selectedConn !== null\n        && this.selectedConn !== hoveredConn\n        && this.selectedConn.isOutput() !== hoveredConn.isOutput()\n        && !this.selectedConn.getConnections().includes(hoveredConn.getID())\n        && !hoveredConn.getConnections().includes(this.selectedConn.getID())) {\n        // make sure connectors are mapped from output->input\n        let outConn = (this.selectedConn.isOutput()) ? this.selectedConn : hoveredConn;\n        let otherConn = (outConn === this.selectedConn) ? hoveredConn : this.selectedConn;\n        otherConn.addConnection(outConn);\n        this.context.moduleController.activeModule.updateConnectorMap();\n        this.context.selectedConnector = null;\n        this.context.setActiveState('HOVER-CONNECTOR', hoveredConn);\n        return;\n      } else if (this.selectedConn === hoveredConn) {\n        return;\n      }\n    }\n\n    this.context.selectedConnector = null;\n    this.context.setActiveState('EMPTY');\n  }\n\n  /**\n   * Handle right-click up events\n   */\n  handleRightClickUp() {}\n\n  /**\n   * Handle double-click events\n   */\n  handleDoubleClick() {}\n\n}\n\n//# sourceURL=webpack:///./public/js/lpg/appl/selection-states/connecting-state.js?");

/***/ }),

/***/ "./public/js/lpg/appl/selection-states/dragging-state.js":
/*!***************************************************************!*\
  !*** ./public/js/lpg/appl/selection-states/dragging-state.js ***!
  \***************************************************************/
/*! exports provided: DraggingState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DraggingState\", function() { return DraggingState; });\nclass DraggingState {\n\n  constructor(context) {\n    this.context = context;\n  }\n\n  /**\n   * Handle mouse movement events\n   */\n  handleMouseMove() {}\n\n  /**\n   * Handle left-click mouse dragging\n   */\n  handleMouseDragLeft(event) {\n    // drag component(s) and selection rect\n    let xDiff = (this.context.mousePos.x - this.context.clickPos.x);\n    let yDiff = (this.context.mousePos.y - this.context.clickPos.y);\n    this.context.selectedComponents.forEach((component) => component.move(xDiff, yDiff));\n    this.context.selectionRect.x += xDiff;\n    this.context.selectionRect.y += yDiff;\n    this.context.clickPos = new createjs.Point(event.stageX, event.stageY);\n  }\n\n  /**\n   * Handle right-click mouse dragging\n   */\n  handleMouseDragRight() {}\n\n  /**\n   * Handle left-click down events\n   */\n  handleLeftClickDown() {}\n\n  /**\n   * Handle right-click down events\n   */\n  handleRightClickDown() {}\n\n  /**\n   * Handle left-click up events\n   */\n  handleLeftClickUp() {\n    if (this.context.selectedComponents.length === 1) {\n      this.context.showComponentSelection();\n    }\n\n    // Move to a hovered state when hovered after selection\n    var hoveredComp = this.context.getHoveredComponent();\n    var hoveredConn = this.context.getHoveredConnector();\n    if (hoveredComp !== null) {\n      this.context.setActiveState('HOVER-COMPONENT', hoveredComp);\n    } else if (hoveredConn !== null) {\n      this.context.setActiveState('HOVER-CONNECTOR', hoveredConn);\n    } else {\n      this.context.setActiveState('EMPTY');\n    }\n  }\n\n  /**\n   * Handle right-click up events\n   */\n  handleRightClickUp() {}\n\n  /**\n   * Handle double-click events\n   */\n  handleDoubleClick() {}\n\n}\n\n//# sourceURL=webpack:///./public/js/lpg/appl/selection-states/dragging-state.js?");

/***/ }),

/***/ "./public/js/lpg/appl/selection-states/empty-state.js":
/*!************************************************************!*\
  !*** ./public/js/lpg/appl/selection-states/empty-state.js ***!
  \************************************************************/
/*! exports provided: EmptyState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EmptyState\", function() { return EmptyState; });\nclass EmptyState {\n\n  constructor(context) {\n    this.context = context;\n  }\n  \n  /**\n   * Handle mouse movement events\n   */\n  handleMouseMove() {\n    let hoveredConn = this.context.getHoveredConnector();\n    let hoveredComp = this.context.getHoveredComponent();\n\n    if (hoveredConn !== null) {\n      this.context.setActiveState('HOVER-CONNECTOR', hoveredConn);\n    } else if (hoveredComp !== null) {\n      this.context.setActiveState('HOVER-COMPONENT', hoveredComp);\n    }\n  }\n\n  /**\n   * Handle left-click mouse dragging\n   */\n  handleMouseDragLeft() {}\n\n  /**\n   * Handle right-click mouse dragging\n   */\n  handleMouseDragRight() {}\n\n  /**\n   * Handle left-click down events\n   */\n  handleLeftClickDown() {\n    this.context.selectionRect = new createjs.Rectangle(this.context.clickPos.x, this.context.clickPos.y, 0, 0);\n    this.context.setActiveState('SELECTING');\n  }\n\n  /**\n   * Handle right-click down events\n   */\n  handleRightClickDown() {\n    this.context.setActiveState('PANNING');\n  }\n\n  /**\n   * Handle left-click up events\n   */\n  handleLeftClickUp() {}\n\n  /**\n   * Handle right-click up events\n   */\n  handleRightClickUp() {}\n\n  /**\n   * Handle double-click events\n   */\n  handleDoubleClick() {}\n}\n\n//# sourceURL=webpack:///./public/js/lpg/appl/selection-states/empty-state.js?");

/***/ }),

/***/ "./public/js/lpg/appl/selection-states/hover-component-state.js":
/*!**********************************************************************!*\
  !*** ./public/js/lpg/appl/selection-states/hover-component-state.js ***!
  \**********************************************************************/
/*! exports provided: HoverComponentState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HoverComponentState\", function() { return HoverComponentState; });\nclass HoverComponentState {\n\n  constructor(context, hoveredComp) {\n    this.context = context;\n    this.hoveredComp = hoveredComp;\n  }\n\n  /**\n   * Handle mouse movement events\n   */\n  handleMouseMove() {\n    let hoveredComp = this.context.getHoveredComponent();\n    if (hoveredComp === null) {\n      this.context.setActiveState('EMPTY');\n    } else if (hoveredComp != this.hoveredComp) {\n      this.context.setActiveState('HOVER-COMPONENT', hoveredComp);\n    }\n  }\n\n  /**\n   * Handle left-click mouse dragging\n   */\n  handleMouseDragLeft() {}\n\n  /**\n   * Handle right-click mouse dragging\n   */\n  handleMouseDragRight() {\n    this.context.setActiveState('PANNING');\n  }\n\n  /**\n   * Handle left-click down events\n   */\n  handleLeftClickDown() {\n    // allow single piece selections\n    if (!this.context.selectedComponents.includes(this.hoveredComp)) {\n      this.context.selectedComponents = [this.hoveredComp];\n    }\n    this.context.setActiveState('DRAGGING');\n  }\n\n  /**\n   * Handle right-click down events\n   */\n  handleRightClickDown() {\n    this.hoveredComp.rightClickDownEvent();\n  }\n\n  /**\n   * Handle left-click up events\n   */\n  handleLeftClickUp() {}\n\n  /**\n   * Handle right-click up events\n   */\n  handleRightClickUp() {\n    this.hoveredComp.rightClickUpEvent();\n  }\n\n  /**\n   * Handle double-click events\n   */\n  handleDoubleClick() {\n    if (this.context.selectedComponents.length === 1) {\n      let selectedComponent = this.context.selectedComponents[0];\n      if (selectedComponent.type === 'MODULE') {\n        // Add active module to stack of current modules\n        this.context.moduleController.activeModules.push(this.context.moduleController.activeModule);\n\n        // Set active module\n        this.context.moduleController.setActiveModule(selectedComponent);\n\n        // Reset component selections\n        this.context.clearSelection();\n\n        // Set module back button visibility\n        $('#module-back-button').css('visibility', 'visible');\n        $('#module-nathis.context').val(this.context.moduleController.activeModule.label);\n      }\n    }\n  }\n\n}\n\n//# sourceURL=webpack:///./public/js/lpg/appl/selection-states/hover-component-state.js?");

/***/ }),

/***/ "./public/js/lpg/appl/selection-states/hover-connector-state.js":
/*!**********************************************************************!*\
  !*** ./public/js/lpg/appl/selection-states/hover-connector-state.js ***!
  \**********************************************************************/
/*! exports provided: HoverConnectorState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HoverConnectorState\", function() { return HoverConnectorState; });\nclass HoverConnectorState {\n\n  constructor(context, hoveredConn) {\n    this.context = context;\n    this.hoveredConn = hoveredConn;\n    this.hoveredSSD = null;\n  }\n\n  /**\n   * Handle mouse movement events\n   */\n  handleMouseMove() {\n    let hoveredConn = this.context.getHoveredConnector();\n\n    // Highlight hovered connector state on SEVEN-SEG-DISP\n    // TODO : change this to be less-specific\n    if (hoveredConn !== null) {\n      if (hoveredConn !== this.hoveredConn) {\n        this.changeState('HOVER-CONNECTOR', hoveredConn);\n        return;\n      } \n      let hoveredConnComp = this.context.moduleController.activeModule.getComponent(hoveredConn);\n      if (hoveredConnComp !== null && hoveredConnComp.type === 'SEVEN-SEG-DISP') {\n        hoveredConnComp.setHoveredConnector(hoveredConn);\n        this.hoveredSSD = hoveredConnComp;\n      }\n    } else {\n      this.changeState('EMPTY');\n    }\n  }\n\n  /**\n   * Handle left-click mouse dragging\n   */\n  handleMouseDragLeft() {\n    this.changeState('CONNECTING', this.hoveredConn);\n  }\n\n  /**\n   * Handle right-click mouse dragging\n   */\n  handleMouseDragRight() {\n    this.changeState('PANNING');\n  }\n\n  /**\n   * Handle left-click down events\n   */\n  handleLeftClickDown() {}\n\n  /**\n   * Handle right-click down events\n   */\n  handleRightClickDown() {}\n\n  /**\n   * Handle left-click up events\n   */\n  handleLeftClickUp() {\n    this.changeState('CONNECTING', this.hoveredConn);\n  }\n\n  /**\n   * Handle right-click up events\n   */\n  handleRightClickUp() {\n    this.context.moduleController.breakConnections(this.hoveredConn);\n  }\n\n  /**\n   * Handle double-click events\n   */\n  handleDoubleClick() {}\n\n  changeState(newState, data) {\n    // Reset SSD hover hint\n    if (this.hoveredSSD !== null) {\n      this.hoveredSSD.setHoveredConnector(null);\n      this.hoveredSSD = null;\n    }\n\n    // Set new state (with data passed)\n    this.context.setActiveState(newState, data);\n  }\n\n}\n\n//# sourceURL=webpack:///./public/js/lpg/appl/selection-states/hover-connector-state.js?");

/***/ }),

/***/ "./public/js/lpg/appl/selection-states/panning-state.js":
/*!**************************************************************!*\
  !*** ./public/js/lpg/appl/selection-states/panning-state.js ***!
  \**************************************************************/
/*! exports provided: PanningState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PanningState\", function() { return PanningState; });\nclass PanningState {\n\n  constructor(context) {\n    this.context = context;\n  }\n\n  /**\n   * Handle mouse movement events\n   */\n  handleMouseMove() {}\n\n  /**\n   * Handle left-click mouse dragging\n   */\n  handleMouseDragLeft() {}\n\n  /**\n   * Handle right-click mouse dragging\n   */\n  handleMouseDragRight(event) {\n    // panning\n    let origin = this.context.moduleController.activeModule.startPos;\n    let xDiff = (this.context.mousePos.x - this.context.clickPos.x);\n    let yDiff = (this.context.mousePos.y - this.context.clickPos.y);\n    origin.x += xDiff;\n    origin.y += yDiff;\n    this.context.selectionRect.x += xDiff;\n    this.context.selectionRect.y += yDiff;\n    this.context.clickPos = new createjs.Point(event.stageX, event.stageY);\n  }\n\n  /**\n   * Handle left-click down events\n   */\n  handleLeftClickDown() {}\n\n  /**\n   * Handle right-click down events\n   */\n  handleRightClickDown() {}\n\n  /**\n   * Handle left-click up events\n   */\n  handleLeftClickUp() {}\n\n  /**\n   * Handle right-click up events\n   */\n  handleRightClickUp() {\n    // Move to a hovered state when hovered after selection\n    var hoveredComp = this.context.getHoveredComponent();\n    var hoveredConn = this.context.getHoveredConnector();\n    if (hoveredComp !== null) {\n      this.context.setActiveState('HOVER-COMPONENT', hoveredComp);\n    } else if (hoveredConn !== null) {\n      this.context.setActiveState('HOVER-CONNECTOR', hoveredConn);\n    } else {\n      this.context.setActiveState('EMPTY');\n    }\n  }\n\n  /**\n   * Handle double-click events\n   */\n  handleDoubleClick() {}\n\n}\n\n//# sourceURL=webpack:///./public/js/lpg/appl/selection-states/panning-state.js?");

/***/ }),

/***/ "./public/js/lpg/appl/selection-states/selecting-state.js":
/*!****************************************************************!*\
  !*** ./public/js/lpg/appl/selection-states/selecting-state.js ***!
  \****************************************************************/
/*! exports provided: SelectingState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SelectingState\", function() { return SelectingState; });\nclass SelectingState {\n\n  constructor(context) {\n    this.context = context;\n  }\n\n  /**\n   * Handle mouse movement events\n   */\n  handleMouseMove() {}\n\n  /**\n   * Handle left-click mouse dragging\n   */\n  handleMouseDragLeft() {\n    // maintain finalize list of selected components while selecting\n    let mousePos = this.context.mousePos;\n    let clickPos = this.context.clickPos;\n    this.context.selectedComponents = this.context.getSelectedComponents();\n    this.context.selectionRect = new createjs.Rectangle(\n      ((mousePos.x > clickPos.x) ? clickPos.x : mousePos.x),\n      ((mousePos.y > clickPos.y) ? clickPos.y : mousePos.y),\n      ((mousePos.x > clickPos.x) ? mousePos.x - clickPos.x : clickPos.x - mousePos.x),\n      ((mousePos.y > clickPos.y) ? mousePos.y - clickPos.y : clickPos.y - mousePos.y)\n    );\n  }\n\n  /**\n   * Handle right-click mouse dragging\n   */\n  handleMouseDragRight() {}\n\n  /**\n   * Handle left-click down events\n   */\n  handleLeftClickDown() {}\n\n  /**\n   * Handle right-click down events\n   */\n  handleRightClickDown() {}\n\n  /**\n   * Handle left-click up events\n   */\n  handleLeftClickUp() {\n\n    // wrap current selection on mouse up\n    if (this.context.getSelectedComponents().length > 0) {\n      this.context.wrapSelection();\n    }\n\n    // Reset component selections\n    else {\n      this.context.clearSelection();\n    }\n\n    // Don't show component settings when more than one component selected\n    if (this.context.getSelectedComponents().length > 1) {\n      this.context.toggleComponentSettings(false);\n    }\n\n    // Move to a hovered state when hovered after selection\n    var hoveredComp = this.context.getHoveredComponent();\n    var hoveredConn = this.context.getHoveredConnector();\n    if (hoveredComp !== null) {\n      this.context.setActiveState('HOVER-COMPONENT', hoveredComp);\n    } else if (hoveredConn !== null) {\n      this.context.setActiveState('HOVER-CONNECTOR', hoveredConn);\n    } else {\n      this.context.setActiveState('EMPTY');\n    }\n  }\n\n  /**\n   * Handle right-click up events\n   */\n  handleRightClickUp() {}\n\n  /**\n   * Handle double-click events\n   */\n  handleDoubleClick() {}\n\n}\n\n//# sourceURL=webpack:///./public/js/lpg/appl/selection-states/selecting-state.js?");

/***/ }),

/***/ "./public/js/lpg/appl/ui-controller.js":
/*!*********************************************!*\
  !*** ./public/js/lpg/appl/ui-controller.js ***!
  \*********************************************/
/*! exports provided: UIController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UIController\", function() { return UIController; });\nclass UIController {\r\n\r\n  /**\r\n   * Construct UI Controller\r\n   * \r\n   * @param {*} moduleController Instance of ModuleController\r\n   * @param {*} selectionController Instance of SelectionController\r\n   * @param {*} fileController Instance of FileController\r\n   */\r\n  constructor(moduleController, selectionController, fileController) {\r\n    this.moduleController = moduleController;\r\n    this.selectionController = selectionController;\r\n    this.fileController = fileController;\r\n    this.visibleImports = [];\r\n  }\r\n\r\n  /**\r\n   * Initalize drag-n-drop functionality from component pool to stage\r\n   */\r\n  setupDragNDropHandler() {\r\n    var me = this;\r\n\r\n    $('#logic-canvas')\r\n      .on('dragover', (event) => event.preventDefault())\r\n      .on('drop', (event) => {\r\n        event.preventDefault();\r\n        var data = event.originalEvent.dataTransfer.getData('text/x-component');\r\n        var dragX = event.clientX - $('#logic-canvas').offset().left;\r\n        var dragY = event.clientY - $('#logic-canvas').offset().top;\r\n        var loc = me.selectionController.getRealCoords({ x: dragX, y: dragY });\r\n        var bounds = new createjs.Rectangle(loc.x, loc.y, 0, 0);\r\n        var component;\r\n\r\n        // imported modules\r\n        if (data.includes('imported_')) {\r\n          var name = data.replace('imported_', '');\r\n          component = me.moduleController.importModule(me.getImportedModule(name), bounds);\r\n        } \r\n        \r\n        // default components\r\n        else {\r\n          component = me.moduleController.addComponent(data, bounds);\r\n        }\r\n\r\n        if (component !== null) {\r\n          // shift component to place at center of cursor\r\n          component.moveTo(\r\n            component.bounds.x - (component.bounds.width / 2),\r\n            component.bounds.y - (component.bounds.height / 2)\r\n          );\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Initialize DragNDrop listeners\r\n   */\r\n  addDragListeners() {\r\n    $('.drag-item').on('dragstart', (event) => {\r\n      event.originalEvent.dataTransfer.setData('text/x-component', event.target.id);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize Module-Controls functionality\r\n   */\r\n  setupModuleControlHandlers() {\r\n    var me = this;\r\n\r\n    $('#controls-new').click(() => {\r\n      if (confirm('Are you sure? You will lose anything not saved!')) {\r\n        me.moduleController.newModule();\r\n        $('#module-name').val(me.moduleController.activeModule.label);\r\n      }\r\n    });\r\n\r\n    $('#controls-save').click(() => me.fileController.saveActiveModule());\r\n\r\n    $('#controls-export').click(() => me.fileController.exportActiveModule());\r\n\r\n    $('#controls-load').click(() => me.fileController.loadModuleFile(me.fileController.loadModule));\r\n\r\n    $('#controls-import').click(() => me.fileController.loadModuleFile(me.fileController.importModule));\r\n\r\n    $('#module-name').on('input propertychange paste', () => {\r\n      me.moduleController.activeModule.label = $('#module-name').val();\r\n    });\r\n\r\n    $('#module-back-button').click((event) => {\r\n      event.preventDefault();\r\n\r\n      // Check if activeModules list is empty\r\n      if (me.moduleController.activeModules.length > 0) {\r\n        var topModule = me.moduleController.activeModules.pop();\r\n\r\n        // Set active module\r\n        me.moduleController.setActiveModule(topModule);\r\n\r\n        // Check stack size again after popping\r\n        if (me.moduleController.activeModules.length === 0) {\r\n          // Set module back button visibility\r\n          $('#module-back-button').css('visibility', 'hidden');\r\n        }\r\n\r\n        $('#module-name').val(me.moduleController.activeModule.label);\r\n\r\n        me.selectionController.clearSelection();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize Component-pool controls functionality\r\n   */\r\n  setupPoolControlHandlers() {\r\n\r\n    // Handle component-type buttons\r\n    $('#pool-gates').click(() => {\r\n      $('#component-menu').css('visibility', 'hidden');\r\n      $('#gate-pool').css('visibility', 'visible');\r\n    });\r\n\r\n    $('#pool-inputs').click(() => {\r\n      $('#component-menu').css('visibility', 'hidden');\r\n      $('#input-pool').css('visibility', 'visible');\r\n    });\r\n\r\n    $('#pool-outputs').click(() => {\r\n      $('#component-menu').css('visibility', 'hidden');\r\n      $('#output-pool').css('visibility', 'visible');\r\n    });\r\n\r\n    $('#pool-imports').click(() => {\r\n      $('#component-menu').css('visibility', 'hidden');\r\n      $('#import-pool').css('visibility', 'visible');\r\n    });\r\n\r\n    // Handle back buttons\r\n    $('#gate-pool-back').click(() => {\r\n      $('#gate-pool').css('visibility', 'hidden');\r\n      $('#component-menu').css('visibility', 'visible');\r\n    });\r\n\r\n    $('#input-pool-back').click(() => {\r\n      $('#input-pool').css('visibility', 'hidden');\r\n      $('#component-menu').css('visibility', 'visible');\r\n    });\r\n\r\n    $('#output-pool-back').click(() => {\r\n      $('#output-pool').css('visibility', 'hidden');\r\n      $('#component-menu').css('visibility', 'visible');\r\n    });\r\n\r\n    $('#import-pool-back').click(() => {\r\n      $('#import-pool').css('visibility', 'hidden');\r\n      $('#component-menu').css('visibility', 'visible');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize all default component types in their respective component pools\r\n   */\r\n  loadDefaultComponents() {\r\n    var me = this;\r\n\r\n    // Load gates\r\n    var tmpGates = [];\r\n    tmpGates.push(this.moduleController.createComponent('and-gate', { x: 0, y: 0 }));\r\n    tmpGates.push(this.moduleController.createComponent('nand-gate', { x: 0, y: 0 }));\r\n    tmpGates.push(this.moduleController.createComponent('or-gate', { x: 0, y: 0 }));\r\n    tmpGates.push(this.moduleController.createComponent('nor-gate', { x: 0, y: 0 }));\r\n    tmpGates.push(this.moduleController.createComponent('xor-gate', { x: 0, y: 0 }));\r\n    tmpGates.push(this.moduleController.createComponent('xnor-gate', { x: 0, y: 0 }));\r\n    tmpGates.push(this.moduleController.createComponent('not-gate', { x: 0, y: 0 }));\r\n\r\n    // Load inputs\r\n    var tmpInputs = [];\r\n    tmpInputs.push(this.moduleController.createComponent('switch-button', { x: 0, y: 0 }));\r\n    tmpInputs.push(this.moduleController.createComponent('hold-button', { x: 0, y: 0 }));\r\n    tmpInputs.push(this.moduleController.createComponent('clock', { x: 0, y: 0 }));\r\n\r\n    // Load outputs\r\n    var tmpOutputs = [];\r\n    tmpOutputs.push(this.moduleController.createComponent('led', { x: 0, y: 0 }));\r\n    tmpOutputs.push(this.moduleController.createComponent('seven-seg-disp', { x: 0, y: 0 }));\r\n    tmpOutputs.push(this.moduleController.createComponent('console', { x: 0, y: 0 }));\r\n\r\n    var loadItemHTML = (comp) => {\r\n      var id = comp.type;  \r\n      var url = comp.exportImage();\r\n\r\n      var label = comp.type.replace('-GATE', '').replace('-BUTTON', '');\r\n      var compItemHTML = \r\n      '<div class=\"pool item shadowed\">\\\r\n        <img class=\"drag-item\" id=\"' + id + '\" src=\"' + url + '\" draggable=\"true\" width=\"70\">\\\r\n        <h4 class=\"controls\">' + label + '</h4>\\\r\n      </div>';\r\n\r\n      return compItemHTML;\r\n    };\r\n\r\n    // load into correct containers\r\n    tmpGates.forEach((gate) => {\r\n      var html = loadItemHTML(gate);\r\n      $('#gate-items').append(html);\r\n      me.addDragListeners();\r\n    });\r\n    tmpInputs.forEach((input) => {\r\n      let html = loadItemHTML(input);\r\n      $('#input-items').append(html);\r\n      me.addDragListeners();\r\n    });\r\n    tmpOutputs.forEach((output) => {\r\n      let html = loadItemHTML(output);\r\n      $('#output-items').append(html);\r\n      me.addDragListeners();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Load an imported module into the UI\r\n   * \r\n   * @param {*} importedModule The Module instance beign loaded\r\n   */\r\n  loadImportedModule(importedModule) {\r\n    var loadItemHTML = (comp) => {\r\n      var id = comp.label;\r\n      var url = comp.exportImage();\r\n      var label = comp.label;\r\n      var compItemHTML = \r\n      '<div class=\"pool item shadowed\">\\\r\n        <img class=\"drag-item\" id=\"imported_' + id + '\" src=\"' + url + '\" draggable=\"true\">\\\r\n        <h4 class=\"controls\">' + label + '</h4>\\\r\n      </div>';\r\n      return compItemHTML;\r\n    };\r\n    \r\n    var html = loadItemHTML(importedModule);\r\n    $('#import-items').append(html);\r\n\r\n    this.addDragListeners();\r\n  }\r\n\r\n  /**\r\n   * Initialize document-wide key-listening for application\r\n   */\r\n  setupKeyListeners() {\r\n    var me = this;\r\n\r\n    $(document).keydown((evt) => {\r\n      const DELETE_KEY = 46;\r\n\r\n      switch (evt.keyCode) {\r\n        case DELETE_KEY:\r\n          me.selectionController.selectedComponents.forEach((comp) => {\r\n            me.moduleController.deleteComponent(me.moduleController.activeModule, comp);\r\n          });\r\n          me.selectionController.clearSelection();\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieve an imported module from sessionStorage that has the current name\r\n   * \r\n   * @param {*} name The module's label being used to retrieve the module instance\r\n   */\r\n  getImportedModule(name) {\r\n    var me = this;\r\n    var result = null;\r\n    JSON.parse(sessionStorage.importedModules).forEach((importedModule) => {\r\n      if (result !== null) return false;\r\n      var mod = JSON.parse(importedModule);\r\n      if (mod.label === name) {\r\n        result = me.moduleController.loadModule(mod);\r\n        return false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Initialize check for un-shown imported modules\r\n   */\r\n  checkImports() {\r\n    var me = this;\r\n    setInterval(() => {\r\n      if (sessionStorage.importedModules !== undefined) {\r\n        JSON.parse(sessionStorage.importedModules).forEach((importedModule) => {\r\n          if (!me.visibleImports.includes(importedModule)) {\r\n            // load module to module object\r\n            var mod = me.moduleController.loadModule(JSON.parse(importedModule));\r\n            \r\n            // add item to ui\r\n            me.loadImportedModule(mod);\r\n\r\n            // add to visibleImports\r\n            me.visibleImports.push(importedModule);\r\n          }\r\n        });\r\n      }\r\n    }, 250);\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/appl/ui-controller.js?");

/***/ }),

/***/ "./public/js/lpg/core.js":
/*!*******************************!*\
  !*** ./public/js/lpg/core.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _appl_selection_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./appl/selection-controller */ \"./public/js/lpg/appl/selection-controller.js\");\n/* harmony import */ var _appl_draw_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./appl/draw-controller */ \"./public/js/lpg/appl/draw-controller.js\");\n/* harmony import */ var _appl_module_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./appl/module-controller */ \"./public/js/lpg/appl/module-controller.js\");\n/* harmony import */ var _appl_ui_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./appl/ui-controller */ \"./public/js/lpg/appl/ui-controller.js\");\n/* harmony import */ var _appl_file_controller__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./appl/file-controller */ \"./public/js/lpg/appl/file-controller.js\");\n/* harmony import */ var _appl_resource_controller__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./appl/resource-controller */ \"./public/js/lpg/appl/resource-controller.js\");\n//\r\n// Imports\r\n// \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// \r\n// Attributes\r\n//\r\nvar stage;\r\nvar moduleController;\r\nvar fileController;\r\nvar selectionController;\r\nvar uiController;\r\nvar drawController;\r\nvar resourceController;\r\n\r\n(() => {\r\n\r\n  // Wait for DOM\r\n  $(document).ready(() => {\r\n\r\n    // Setup controllers\r\n    console.info('loading stage...');\r\n    stage = new createjs.StageGL('logic-canvas');\r\n    resourceController = new _appl_resource_controller__WEBPACK_IMPORTED_MODULE_5__[\"ResourceController\"]();\r\n    moduleController = new _appl_module_controller__WEBPACK_IMPORTED_MODULE_2__[\"ModuleController\"](resourceController);\r\n    fileController = new _appl_file_controller__WEBPACK_IMPORTED_MODULE_4__[\"FileController\"](moduleController);\r\n    selectionController = new _appl_selection_controller__WEBPACK_IMPORTED_MODULE_0__[\"SelectionController\"](stage, moduleController);\r\n    uiController = new _appl_ui_controller__WEBPACK_IMPORTED_MODULE_3__[\"UIController\"](moduleController, selectionController, fileController);\r\n    drawController = new _appl_draw_controller__WEBPACK_IMPORTED_MODULE_1__[\"DrawController\"](stage, selectionController, moduleController, resourceController);\r\n\r\n    // Initialize application\r\n    initialize();\r\n  });\r\n\r\n  /**\r\n   * Default application initialization\r\n   */\r\n  function initialize() {\r\n\r\n    // disable right-click on canvas\r\n    $('#logic-canvas').bind('contextmenu', () => {\r\n      return false;\r\n    });\r\n\r\n    // Pre-fit the stage to make it look not-ugly\r\n    drawController.fitStage();\r\n\r\n    // Load required resources\r\n    //  Wait for these to complete before doing any other processing\r\n    resourceController.loadResources(() => {\r\n\r\n      // Load saved module (if any)\r\n      fileController.loadSavedModule();\r\n\r\n      // Start painting\r\n      drawController.startPainting();\r\n\r\n      // Start animations\r\n      drawController.startAnimationTimer();\r\n\r\n      // Fill default component pools\r\n      uiController.loadDefaultComponents();\r\n\r\n      // Handle drag-n-drops\r\n      uiController.setupDragNDropHandler();\r\n\r\n      // Handle component pool controls\r\n      uiController.setupPoolControlHandlers();\r\n\r\n      // Handle module controls\r\n      uiController.setupModuleControlHandlers();\r\n\r\n      // Handle keyboard events\r\n      uiController.setupKeyListeners();\r\n\r\n      // Begin checking for imported modules\r\n      uiController.checkImports();\r\n\r\n      // Update connection mappings\r\n      moduleController.activeModule.updateConnectorMap();\r\n\r\n      // Start logic flow\r\n      moduleController.startLogicTimer();\r\n\r\n      // setup mouse-event handling\r\n      stage.mouseMoveOutside = true;\r\n      selectionController.initMouseEvents();\r\n      selectionController.setActiveState('EMPTY');\r\n    });\r\n  }\r\n})();\r\n\n\n//# sourceURL=webpack:///./public/js/lpg/core.js?");

/***/ }),

/***/ "./public/js/lpg/model/component.js":
/*!******************************************!*\
  !*** ./public/js/lpg/model/component.js ***!
  \******************************************/
/*! exports provided: Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Component\", function() { return Component; });\nclass Component {\r\n\r\n  /**\r\n   * General Component constructor\r\n   * @param bounds \r\n   *    A createjs.Point instance representing the real-valued bounds of this component\r\n   */\r\n  constructor(type, superType, bounds) {\r\n    this.label = '';\r\n    this.type = type;\r\n    this.superType = superType;\r\n    this.bounds = bounds;\r\n    this.connectors = [];\r\n    this.id = (this.id) ? this.id : uuid();\r\n  }\r\n\r\n  /**\r\n   * Default Component paint prototype\r\n   */\r\n  paint() {  }\r\n\r\n  /**\r\n   * Default Component settings loader\r\n   * \r\n   * @param elem The DOM element the settings are being loaded into\r\n   */\r\n  loadSettings(elem) {\r\n    elem.html('');\r\n  }\r\n\r\n  /**\r\n   * Move this component to the specified coordinates\r\n   *  This is a repositioning type of move.\r\n   *  Use move() to move this component relative to its current position\r\n   * \r\n   * @param {number} x \r\n   * @param {number} y \r\n   */\r\n  moveTo(x, y) {\r\n    const lastX = this.bounds.x;\r\n    const lastY = this.bounds.y;\r\n\r\n    // update this components bounds\r\n    this.bounds.x = x;\r\n    this.bounds.y = y;\r\n\r\n    var diffX = (this.bounds.x - lastX);\r\n    var diffY = (this.bounds.y - lastY);\r\n\r\n    // update all of this components connectors bounds\r\n    this.connectors.forEach((connector) =>  {\r\n      connector.moveTo(\r\n        connector.bounds.x + diffX,\r\n        connector.bounds.y + diffY\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Move this component to the specified coordinates relative to it's current position\r\n   *  This is a relative type of move.\r\n   *  Use moveTo() to absolutely position this component\r\n   * \r\n   * @param {number} x \r\n   * @param {number} y \r\n   */\r\n  move(x, y) {\r\n    this.moveTo(this.bounds.x + x, this.bounds.y + y);\r\n  }\r\n\r\n  /**\r\n   * Retrieve the list of connectors for this component\r\n   */\r\n  getConnectors() {\r\n    return this.connectors;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the list of only output-type connectors for this component\r\n   */\r\n  getOutputConnectors() {\r\n    var outputConns = [];\r\n    this.connectors.forEach((conn) => {\r\n      if (conn.isOutput()) {\r\n        outputConns.push(conn);\r\n      }\r\n    });\r\n    return outputConns;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the list of only input-type connectors for this component\r\n   */\r\n  getInputConnectors() {\r\n    var inputConns = [];\r\n    this.connectors.forEach((conn) => {\r\n      if (conn.isInput()) {\r\n        inputConns.push(conn);\r\n      }\r\n    });\r\n    return inputConns;\r\n  }\r\n\r\n  /**\r\n   * Check if the component is a Gate-type component\r\n   */\r\n  isGate() {\r\n    return this.superType === 'GATE';\r\n  }\r\n\r\n  /**\r\n   * Check if the component is an Output-type component\r\n   */\r\n  isOutputComp() {\r\n    return this.superType === 'OUTPUT';\r\n  }\r\n\r\n  /**\r\n   * Check if the component is an Input-type component\r\n   */\r\n  isInputComp() {\r\n    return this.superType === 'INPUT';\r\n  }\r\n\r\n  /**\r\n   * Default right-click down behavior\r\n   */\r\n  rightClickDownEvent() { }\r\n\r\n  /**\r\n   * Default left-click down behavior\r\n   */\r\n  leftClickDownEvent() { }\r\n\r\n  /**\r\n   * Default right-click up behavior\r\n   */\r\n  rightClickUpEvent() { }\r\n\r\n  /**\r\n   * Default left-click up behavior\r\n   */\r\n  leftClickUpEvent() { }\r\n\r\n  /**\r\n   * Default double-click (left) behavior\r\n   */\r\n  doubleClickEvent() { }\r\n\r\n  /**\r\n   * Export this component to an data-url image\r\n   * \r\n   * @returns the data-url of the processed image\r\n   */\r\n  exportImage() {\r\n    var compShape = new createjs.Shape();\r\n    var graphics = compShape.graphics;\r\n    const cachePadding = 10;\r\n\r\n    this.paint(graphics, { x: cachePadding / 2, y: cachePadding / 2 });\r\n\r\n    compShape.cache(0, 0, this.bounds.width + cachePadding, this.bounds.height + cachePadding);\r\n    var url = compShape.bitmapCache.getCacheDataURL();\r\n    \r\n    return url;\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/component.js?");

/***/ }),

/***/ "./public/js/lpg/model/logic.js":
/*!**************************************!*\
  !*** ./public/js/lpg/model/logic.js ***!
  \**************************************/
/*! exports provided: Logic */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Logic\", function() { return Logic; });\n/**\r\n * Logic module that allows for static calls boolean logic operations\r\n */\r\nclass Logic {\r\n\r\n  /**\r\n   * @param {boolean} a input a\r\n   * @param {boolean} b input b\r\n   * @return {boolean} Result of boolean AND operation\r\n   */\r\n  static andd(a, b) {\r\n    return a && b;\r\n  }\r\n\r\n  /**\r\n   * @param {boolean} a input a\r\n   * @param {boolean} b input b\r\n   * @return {boolean} Result of boolean OR operation\r\n   */\r\n  static orr(a, b) {\r\n    return a || b;\r\n  }\r\n\r\n  /**\r\n   * @param {boolean} a input a\r\n   * @return {boolean} Result of boolean NOT operation\r\n   */\r\n  static nott(a) {\r\n    return !a;\r\n  }\r\n\r\n  /**\r\n   * @param {boolean} a input a\r\n   * @param {boolean} b input b\r\n   * @return {boolean} Result of boolean NAND operation\r\n   */\r\n  static nandd(a, b) {\r\n    return this.nott(this.andd(a, b));\r\n  }\r\n\r\n  /**\r\n   * @param {boolean} a input a\r\n   * @param {boolean} b input b\r\n   * @return {boolean} Result of boolean NOR operation\r\n   */\r\n  static norr(a, b) {\r\n    return this.nott(this.orr(a, b));\r\n  }\r\n\r\n  /**\r\n   * @param {boolean} a input a\r\n   * @param {boolean} b input b\r\n   * @return {boolean} Result of boolean XNOR operation\r\n   */\r\n  static xnorr(a, b) {\r\n    return !(a ^ b);\r\n  }\r\n\r\n  /**\r\n   * @param {boolean} a input a\r\n   * @param {boolean} b input b\r\n   * @return {boolean} Result of boolean XOR operation\r\n   */\r\n  static xorr(a, b) {\r\n    return !this.xnorr(a, b);\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/logic.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/gate.js":
/*!*******************************************!*\
  !*** ./public/js/lpg/model/types/gate.js ***!
  \*******************************************/
/*! exports provided: Gate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Gate\", function() { return Gate; });\n/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component */ \"./public/js/lpg/model/component.js\");\n// \r\n// Includes\r\n// \r\n \r\n\r\n// \r\n// Constants\r\n// \r\n\r\n// \r\n// Attributes\r\n// \r\n\r\nclass Gate extends _component__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\r\n\r\n  /**\r\n   * Construct a Gate-type component\r\n   * \r\n   * @param {string} type \r\n   * @param {string} superType \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(type, superType, bounds) {\r\n    super(type, superType, bounds);\r\n  }\r\n\r\n  /**\r\n   * Default Gate propagate prototype function\r\n   */\r\n  propagate() { }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/gate.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/gates/and-gate.js":
/*!*****************************************************!*\
  !*** ./public/js/lpg/model/types/gates/and-gate.js ***!
  \*****************************************************/
/*! exports provided: ANDGate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ANDGate\", function() { return ANDGate; });\n/* harmony import */ var _types_gate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/gate */ \"./public/js/lpg/model/types/gate.js\");\n/* harmony import */ var _misc_connector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _logic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../logic */ \"./public/js/lpg/model/logic.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n\r\n//\r\n// Attributes\r\n// \r\nlet image = null;\r\n\r\nclass ANDGate extends _types_gate__WEBPACK_IMPORTED_MODULE_0__[\"Gate\"] {\r\n\r\n  /**\r\n   * ANDGate Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds, img) {\r\n    super('AND-GATE', 'GATE', bounds);\r\n    image = (image === null) ? img : image;\r\n    this.setupGate();\r\n  }\r\n\r\n  setupGate() {\r\n    if (this.connectors.length === 0) {\r\n      this.bounds.width = image.width;\r\n      this.bounds.height = image.height;\r\n\r\n      // setup connectors\r\n      const inputOffset = 11; // Comes from image size\r\n      var input1 = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x, y: this.bounds.y + inputOffset }, 'INPUT');\r\n      var input2 = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x, y: (this.bounds.y + this.bounds.height) - inputOffset }, 'INPUT');\r\n      var output = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x + this.bounds.width, y: this.bounds.y + (this.bounds.height / 2) }, 'OUTPUT');\r\n      this.connectors.push(input1, input2, output);\r\n    }\r\n\r\n    // initialize gate\r\n    this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Override propagate functionality\r\n   */\r\n  propagate() {\r\n    var input1 = this.connectors[0];\r\n    var input2 = this.connectors[1];\r\n    var output = this.connectors[2];\r\n    output.updateState(_logic__WEBPACK_IMPORTED_MODULE_2__[\"Logic\"].andd(input1.getState(), input2.getState()));\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} canvasLoc The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, canvasLoc) {\r\n    // create and translate matrix to offset comp's x and y\r\n    var matrix = new createjs.Matrix2D();\r\n    matrix.translate(canvasLoc.x, canvasLoc.y);\r\n\r\n    // set fill to image bitmap, fill image\r\n    graphics.beginBitmapFill(image, 'no-repeat', matrix)\r\n      .drawRect(canvasLoc.x, canvasLoc.y, image.width, image.height)\r\n      .endFill();\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/gates/and-gate.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/gates/nand-gate.js":
/*!******************************************************!*\
  !*** ./public/js/lpg/model/types/gates/nand-gate.js ***!
  \******************************************************/
/*! exports provided: NANDGate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NANDGate\", function() { return NANDGate; });\n/* harmony import */ var _types_gate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/gate */ \"./public/js/lpg/model/types/gate.js\");\n/* harmony import */ var _misc_connector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _logic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../logic */ \"./public/js/lpg/model/logic.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n\r\n//\r\n// Attributes\r\n// \r\nlet image = null;\r\n\r\nclass NANDGate extends _types_gate__WEBPACK_IMPORTED_MODULE_0__[\"Gate\"] {\r\n\r\n  /**\r\n   * NANDGate Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds, img) {\r\n    super('NAND-GATE', 'GATE', bounds);\r\n    image = (image === null) ? img : image;\r\n    this.setupGate();\r\n  }\r\n\r\n  setupGate() {\r\n    if (this.connectors.length === 0) {\r\n      this.bounds.width = image.width;\r\n      this.bounds.height = image.height;\r\n\r\n      // setup connectors\r\n      const inputOffset = 11; // Comes from image size\r\n      var input1 = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x, y: this.bounds.y + inputOffset }, 'INPUT');\r\n      var input2 = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x, y: (this.bounds.y + this.bounds.height) - inputOffset }, 'INPUT');\r\n      var output = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x + this.bounds.width, y: this.bounds.y + (this.bounds.height / 2) }, 'OUTPUT');\r\n      this.connectors.push(input1, input2, output);\r\n    }\r\n\r\n    // initialize gate\r\n    this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Override propagate functionality\r\n   */\r\n  propagate() {\r\n    var input1 = this.connectors[0];\r\n    var input2 = this.connectors[1];\r\n    var output = this.connectors[2];\r\n    output.updateState(_logic__WEBPACK_IMPORTED_MODULE_2__[\"Logic\"].nandd(input1.getState(), input2.getState()));\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} canvasLoc The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, canvasLoc) {\r\n    // create and translate matrix to offset comp's x and y\r\n    var matrix = new createjs.Matrix2D();\r\n    matrix.translate(canvasLoc.x, canvasLoc.y);\r\n\r\n    // set fill to image bitmap, fill image\r\n    graphics.beginBitmapFill(image, 'no-repeat', matrix)\r\n      .drawRect(canvasLoc.x, canvasLoc.y, image.width, image.height)\r\n      .endFill();\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/gates/nand-gate.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/gates/nor-gate.js":
/*!*****************************************************!*\
  !*** ./public/js/lpg/model/types/gates/nor-gate.js ***!
  \*****************************************************/
/*! exports provided: NORGate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NORGate\", function() { return NORGate; });\n/* harmony import */ var _types_gate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/gate */ \"./public/js/lpg/model/types/gate.js\");\n/* harmony import */ var _misc_connector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _logic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../logic */ \"./public/js/lpg/model/logic.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n\r\n//\r\n// Attributes\r\n// \r\nlet image = null;\r\n\r\nclass NORGate extends _types_gate__WEBPACK_IMPORTED_MODULE_0__[\"Gate\"] {\r\n\r\n  /**\r\n   * NORGate Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds, img) {\r\n    super('NOR-GATE', 'GATE', bounds);\r\n    image = (image === null) ? img : image;\r\n    this.setupGate();\r\n  }\r\n\r\n  setupGate() {\r\n    if (this.connectors.length === 0) {\r\n      this.bounds.width = image.width;\r\n      this.bounds.height = image.height;\r\n\r\n      // setup connectors\r\n      const inputOffset = 11; // Comes from image size\r\n      var input1 = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x, y: this.bounds.y + inputOffset }, 'INPUT');\r\n      var input2 = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x, y: (this.bounds.y + this.bounds.height) - inputOffset }, 'INPUT');\r\n      var output = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x + this.bounds.width, y: this.bounds.y + (this.bounds.height / 2) }, 'OUTPUT');\r\n      this.connectors.push(input1, input2, output);\r\n    }\r\n\r\n    // initialize gate\r\n    this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Override propagate functionality\r\n   */\r\n  propagate() {\r\n    var input1 = this.connectors[0];\r\n    var input2 = this.connectors[1];\r\n    var output = this.connectors[2];\r\n    output.updateState(_logic__WEBPACK_IMPORTED_MODULE_2__[\"Logic\"].norr(input1.getState(), input2.getState()));\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} canvasLoc The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, canvasLoc) {\r\n    // create and translate matrix to offset comp's x and y\r\n    var matrix = new createjs.Matrix2D();\r\n    matrix.translate(canvasLoc.x, canvasLoc.y);\r\n\r\n    // set fill to image bitmap, fill image\r\n    graphics.beginBitmapFill(image, 'no-repeat', matrix)\r\n      .drawRect(canvasLoc.x, canvasLoc.y, image.width, image.height)\r\n      .endFill();\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/gates/nor-gate.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/gates/not-gate.js":
/*!*****************************************************!*\
  !*** ./public/js/lpg/model/types/gates/not-gate.js ***!
  \*****************************************************/
/*! exports provided: NOTGate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NOTGate\", function() { return NOTGate; });\n/* harmony import */ var _types_gate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/gate */ \"./public/js/lpg/model/types/gate.js\");\n/* harmony import */ var _misc_connector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _logic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../logic */ \"./public/js/lpg/model/logic.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n\r\n//\r\n// Attributes\r\n// \r\nlet image = null;\r\n\r\nclass NOTGate extends _types_gate__WEBPACK_IMPORTED_MODULE_0__[\"Gate\"] {\r\n\r\n  /**\r\n   * NOTGate Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds, img) {\r\n    super('NOT-GATE', 'GATE', bounds);\r\n    image = (image === null) ? img : image;\r\n    this.setupGate();\r\n  }\r\n\r\n  setupGate() {\r\n    if (this.connectors.length === 0) {\r\n      this.bounds.width = image.width;\r\n      this.bounds.height = image.height;\r\n\r\n      // setup connectors\r\n      var input = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x, y: this.bounds.y + (this.bounds.height / 2) }, 'INPUT');\r\n      var output = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x + this.bounds.width, y: this.bounds.y + (this.bounds.height / 2) }, 'OUTPUT');\r\n      this.connectors.push(input, output);\r\n    }\r\n\r\n    // initialize gate\r\n    this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Override propagate functionality\r\n   */\r\n  propagate() {\r\n    var input = this.connectors[0];\r\n    var output = this.connectors[1];\r\n    output.updateState(_logic__WEBPACK_IMPORTED_MODULE_2__[\"Logic\"].nott(input.getState()));\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} canvasLoc The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, canvasLoc) {\r\n    // create and translate matrix to offset comp's x and y\r\n    var matrix = new createjs.Matrix2D();\r\n    matrix.translate(canvasLoc.x, canvasLoc.y);\r\n\r\n    // set fill to image bitmap, fill image\r\n    graphics.beginBitmapFill(image, 'no-repeat', matrix)\r\n      .drawRect(canvasLoc.x, canvasLoc.y, image.width, image.height)\r\n      .endFill();\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/gates/not-gate.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/gates/or-gate.js":
/*!****************************************************!*\
  !*** ./public/js/lpg/model/types/gates/or-gate.js ***!
  \****************************************************/
/*! exports provided: ORGate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ORGate\", function() { return ORGate; });\n/* harmony import */ var _types_gate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/gate */ \"./public/js/lpg/model/types/gate.js\");\n/* harmony import */ var _misc_connector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _logic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../logic */ \"./public/js/lpg/model/logic.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n\r\n//\r\n// Attributes\r\n// \r\nlet image = null;\r\n\r\nclass ORGate extends _types_gate__WEBPACK_IMPORTED_MODULE_0__[\"Gate\"] {\r\n\r\n  /**\r\n   * ORGate Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds, img) {\r\n    super('OR-GATE', 'GATE', bounds);\r\n    image = (image === null) ? img : image;\r\n    this.setupGate();\r\n  }\r\n\r\n  setupGate() {\r\n    if (this.connectors.length === 0) {\r\n      this.bounds.width = image.width;\r\n      this.bounds.height = image.height;\r\n\r\n      // setup connectors\r\n      const inputOffset = 11; // Comes from image size\r\n      var input1 = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x, y: this.bounds.y + inputOffset }, 'INPUT');\r\n      var input2 = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x, y: (this.bounds.y + this.bounds.height) - inputOffset }, 'INPUT');\r\n      var output = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x + this.bounds.width, y: this.bounds.y + (this.bounds.height / 2) }, 'OUTPUT');\r\n      this.connectors.push(input1, input2, output);\r\n    }\r\n\r\n    // initialize gate\r\n    this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Override propagate functionality\r\n   */\r\n  propagate() {\r\n    var input1 = this.connectors[0];\r\n    var input2 = this.connectors[1];\r\n    var output = this.connectors[2];\r\n    output.updateState(_logic__WEBPACK_IMPORTED_MODULE_2__[\"Logic\"].orr(input1.getState(), input2.getState()));\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} canvasLoc The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, canvasLoc) {\r\n    // create and translate matrix to offset comp's x and y\r\n    var matrix = new createjs.Matrix2D();\r\n    matrix.translate(canvasLoc.x, canvasLoc.y);\r\n\r\n    // set fill to image bitmap, fill image\r\n    graphics.beginBitmapFill(image, 'no-repeat', matrix)\r\n      .drawRect(canvasLoc.x, canvasLoc.y, image.width, image.height)\r\n      .endFill();\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/gates/or-gate.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/gates/xnor-gate.js":
/*!******************************************************!*\
  !*** ./public/js/lpg/model/types/gates/xnor-gate.js ***!
  \******************************************************/
/*! exports provided: XNORGate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"XNORGate\", function() { return XNORGate; });\n/* harmony import */ var _types_gate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/gate */ \"./public/js/lpg/model/types/gate.js\");\n/* harmony import */ var _misc_connector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _logic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../logic */ \"./public/js/lpg/model/logic.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n\r\n//\r\n// Attributes\r\n// \r\nlet image = null;\r\n\r\nclass XNORGate extends _types_gate__WEBPACK_IMPORTED_MODULE_0__[\"Gate\"] {\r\n\r\n  /**\r\n   * XNORGate Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds, img) {\r\n    super('XNOR-GATE', 'GATE', bounds);\r\n    image = (image === null) ? img : image;\r\n    this.setupGate();\r\n  }\r\n\r\n  setupGate() {\r\n    if (this.connectors.length === 0) {\r\n      this.bounds.width = image.width;\r\n      this.bounds.height = image.height;\r\n\r\n      // setup connectors\r\n      const inputOffset = 11; // Comes from image size\r\n      var input1 = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x, y: this.bounds.y + inputOffset }, 'INPUT');\r\n      var input2 = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x, y: (this.bounds.y + this.bounds.height) - inputOffset }, 'INPUT');\r\n      var output = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x + this.bounds.width, y: this.bounds.y + (this.bounds.height / 2) }, 'OUTPUT');\r\n      this.connectors.push(input1, input2, output);\r\n    }\r\n\r\n    // initialize gate\r\n    this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Override propagate functionality\r\n   */\r\n  propagate() {\r\n    var input1 = this.connectors[0];\r\n    var input2 = this.connectors[1];\r\n    var output = this.connectors[2];\r\n    output.updateState(_logic__WEBPACK_IMPORTED_MODULE_2__[\"Logic\"].xnorr(input1.getState(), input2.getState()));\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} canvasLoc The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, canvasLoc) {\r\n    // create and translate matrix to offset comp's x and y\r\n    var matrix = new createjs.Matrix2D();\r\n    matrix.translate(canvasLoc.x, canvasLoc.y);\r\n\r\n    // set fill to image bitmap, fill image\r\n    graphics.beginBitmapFill(image, 'no-repeat', matrix)\r\n      .drawRect(canvasLoc.x, canvasLoc.y, image.width, image.height)\r\n      .endFill();\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/gates/xnor-gate.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/gates/xor-gate.js":
/*!*****************************************************!*\
  !*** ./public/js/lpg/model/types/gates/xor-gate.js ***!
  \*****************************************************/
/*! exports provided: XORGate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"XORGate\", function() { return XORGate; });\n/* harmony import */ var _types_gate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/gate */ \"./public/js/lpg/model/types/gate.js\");\n/* harmony import */ var _misc_connector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _logic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../logic */ \"./public/js/lpg/model/logic.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n\r\n//\r\n// Attributes\r\n// \r\nlet image = null;\r\n\r\nclass XORGate extends _types_gate__WEBPACK_IMPORTED_MODULE_0__[\"Gate\"] {\r\n\r\n  /**\r\n   * XORGate Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds, img) {\r\n    super('XOR-GATE', 'GATE', bounds);\r\n    image = (image === null) ? img : image;\r\n    this.setupGate();\r\n  }\r\n\r\n  setupGate() {\r\n    if (this.connectors.length === 0) {\r\n      this.bounds.width = image.width;\r\n      this.bounds.height = image.height;\r\n\r\n      // setup connectors\r\n      const inputOffset = 11; // Comes from image size\r\n      var input1 = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x, y: this.bounds.y + inputOffset }, 'INPUT');\r\n      var input2 = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x, y: (this.bounds.y + this.bounds.height) - inputOffset }, 'INPUT');\r\n      var output = new _misc_connector__WEBPACK_IMPORTED_MODULE_1__[\"Connector\"]({ x: this.bounds.x + this.bounds.width, y: this.bounds.y + (this.bounds.height / 2) }, 'OUTPUT');\r\n      this.connectors.push(input1, input2, output);\r\n    }\r\n\r\n    // initialize gate\r\n    this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Override propagate functionality\r\n   */\r\n  propagate() {\r\n    var input1 = this.connectors[0];\r\n    var input2 = this.connectors[1];\r\n    var output = this.connectors[2];\r\n    output.updateState(_logic__WEBPACK_IMPORTED_MODULE_2__[\"Logic\"].xorr(input1.getState(), input2.getState()));\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} canvasLoc The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, canvasLoc) {\r\n    // create and translate matrix to offset comp's x and y\r\n    var matrix = new createjs.Matrix2D();\r\n    matrix.translate(canvasLoc.x, canvasLoc.y);\r\n\r\n    // set fill to image bitmap, fill image\r\n    graphics.beginBitmapFill(image, 'no-repeat', matrix)\r\n      .drawRect(canvasLoc.x, canvasLoc.y, image.width, image.height)\r\n      .endFill();\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/gates/xor-gate.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/input.js":
/*!********************************************!*\
  !*** ./public/js/lpg/model/types/input.js ***!
  \********************************************/
/*! exports provided: Input */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Input\", function() { return Input; });\n/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component */ \"./public/js/lpg/model/component.js\");\n// \r\n// Includes\r\n// \r\n \r\n  \r\nclass Input extends _component__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\r\n\r\n  /**\r\n   * Construct an Input-type component\r\n   * \r\n   * @param {string} type \r\n   * @param {string} superType \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(type, superType, bounds) {\r\n    super(type, superType, bounds);\r\n  }\r\n\r\n  /**\r\n   * Set the state of this input component\r\n   * \r\n   * @param {boolean} newState \r\n   */\r\n  setState(newState) {\r\n    return this.connectors[0].updateState(newState);\r\n  }\r\n\r\n  /**\r\n   * Get the state of this input component\r\n   * \r\n   * @returns {boolean} The state of the component \r\n   */\r\n  getState() {\r\n    return this.connectors[0].getState();\r\n  }\r\n\r\n  /**\r\n   * Input Component settings loader\r\n   * \r\n   * @param elem The DOM element the settings are being loaded into\r\n   */\r\n  loadSettings(elem) {\r\n    super.loadSettings(elem);\r\n    let me = this;\r\n    let labelControlID = 'label-control';\r\n    let labelControlHTML = '<button id=\"' + labelControlID + '\" type=\"button\">Set Label</button>'; \r\n    elem.append(labelControlHTML);\r\n    $('#' + labelControlID).addClass('controls');\r\n    $('#' + labelControlID).on('click', () => {\r\n      let newLabel = prompt('Enter new label:', me.label);\r\n      me.label = (newLabel === null) ? me.label : newLabel;\r\n    });\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/input.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/inputs/clock.js":
/*!***************************************************!*\
  !*** ./public/js/lpg/model/types/inputs/clock.js ***!
  \***************************************************/
/*! exports provided: Clock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Clock\", function() { return Clock; });\n/* harmony import */ var _misc_connector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _types_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/input */ \"./public/js/lpg/model/types/input.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n// \r\n// Constants\r\n// \r\nconst BUTTON_RADIUS = 30;\r\nconst DEFAULT_INTERVAL = 1000;\r\n\r\nclass Clock extends _types_input__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] {\r\n\r\n  /**\r\n   * Clock Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds) {\r\n    super('CLOCK', 'INPUT', bounds, false);\r\n\r\n    this.bounds.width = BUTTON_RADIUS;\r\n    this.bounds.height = BUTTON_RADIUS;\r\n\r\n    this.interval = DEFAULT_INTERVAL;\r\n    this.nextTick = Date.now() + this.interval;\r\n\r\n    var output = new _misc_connector__WEBPACK_IMPORTED_MODULE_0__[\"Connector\"](\r\n      {\r\n        x: this.bounds.x + BUTTON_RADIUS + ((BUTTON_RADIUS / 2) * (2 / 3)),\r\n        y: this.bounds.y + (BUTTON_RADIUS / 2)\r\n      },\r\n      'OUTPUT'\r\n    );\r\n    this.connectors.push(output);\r\n\r\n    // Begin clock timer\r\n    this.start();\r\n  }\r\n\r\n  /**\r\n   * Start the Clock's timer\r\n   */\r\n  start() {\r\n    var me = this;\r\n    setInterval(() =>  {\r\n      if (me.nextTick < Date.now()) {\r\n        me.nextTick = Date.now() + me.interval;\r\n        me.connectors[0].updateState(!me.connectors[0].getState());\r\n      }\r\n    }, 1);\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} screenLoc The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, screenPos) {\r\n    var centerX = screenPos.x + (BUTTON_RADIUS / 2);\r\n    var centerY = screenPos.y + (BUTTON_RADIUS / 2);\r\n    var activeColor = (this.getState()) ? 'rgb(0,200,0)' : 'rgb(200,0,0)';\r\n    var inactiveColor = (this.getState()) ? 'rgb(200,0,0)' : 'rgb(0,200,0)';\r\n\r\n    var angle = (Math.PI * 2) * ((this.nextTick - Date.now()) / this.interval);\r\n\r\n    // Draw connector line\r\n    graphics.beginStroke('rgb(0,0,0)')\r\n      .setStrokeStyle(2)\r\n      .moveTo(centerX, centerY)\r\n      .lineTo(centerX + ((BUTTON_RADIUS / 2) * (3 / 2)), centerY)\r\n      .endStroke()\r\n      // Draw current state\r\n      .beginFill(activeColor)\r\n      .drawCircle(centerX, centerY, BUTTON_RADIUS / 2)\r\n      .endFill()\r\n      // Draw time-left arc\r\n      .setStrokeStyle(BUTTON_RADIUS / 2)\r\n      .beginStroke(inactiveColor)\r\n      .arc(centerX, centerY, BUTTON_RADIUS / 4, 0, angle, false)\r\n      .endStroke()\r\n      .setStrokeStyle()\r\n      // Draw outline\r\n      .setStrokeStyle(2)\r\n      .beginStroke('rgb(0,0,0)')\r\n      .drawCircle(centerX, centerY, BUTTON_RADIUS / 2)\r\n      .endStroke()\r\n      // Draw center area\r\n      .beginFill('rgb(0,0,0)')\r\n      .drawCircle(centerX, centerY, BUTTON_RADIUS / 3)\r\n      .endFill()\r\n      .setStrokeStyle();\r\n  }\r\n\r\n  /**\r\n   * LED Component settings loader\r\n   * \r\n   * @param elem The DOM element the settings are being loaded into\r\n   */\r\n  loadSettings(elem) {\r\n    super.loadSettings(elem);\r\n    let me = this;\r\n    let clockControlID = 'clock-timer-control';\r\n    let clockControlHTML = '<input id=\"' + clockControlID + '\" type=\"button\" value=\"Set Interval\">';\r\n    \r\n    elem.append(clockControlHTML);\r\n    $('#' + clockControlID).addClass('controls');\r\n\r\n    $('#' + clockControlID).on('click', () => {\r\n      let promptVal = prompt('Set new interval (ms): ', me.interval);\r\n      let val = parseInt(promptVal);\r\n      if (promptVal !== null) {\r\n        if (!isNaN(val) && isFinite(val)) {\r\n          me.interval = parseInt(val, 10);\r\n          me.nextTick = Date.now() + me.interval;\r\n        } else {\r\n          alert(promptVal + ' is not a number!');\r\n        }\r\n      }\r\n    }); \r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/inputs/clock.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/inputs/hold-button.js":
/*!*********************************************************!*\
  !*** ./public/js/lpg/model/types/inputs/hold-button.js ***!
  \*********************************************************/
/*! exports provided: HoldButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HoldButton\", function() { return HoldButton; });\n/* harmony import */ var _misc_connector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _types_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/input */ \"./public/js/lpg/model/types/input.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n// \r\n// Constants\r\n// \r\nconst BUTTON_RADIUS = 30;\r\n\r\nclass HoldButton extends _types_input__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] {\r\n\r\n  /**\r\n   * HoldButton Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds) {\r\n    super('HOLD-BUTTON', 'INPUT', bounds, true);\r\n    this.bounds.width = BUTTON_RADIUS;\r\n    this.bounds.height = BUTTON_RADIUS;\r\n\r\n    var output = new _misc_connector__WEBPACK_IMPORTED_MODULE_0__[\"Connector\"](\r\n      {\r\n        x: this.bounds.x + BUTTON_RADIUS + ((BUTTON_RADIUS / 2) * (2 / 3)),\r\n        y: this.bounds.y + (BUTTON_RADIUS / 2)\r\n      },\r\n      'OUTPUT'\r\n    );\r\n    this.connectors.push(output);\r\n  }\r\n\r\n  /**\r\n   * Toggle hold-button state on right click down\r\n   */\r\n  rightClickDownEvent() {\r\n    this.setState(!this.getState());\r\n  }\r\n\r\n  /**\r\n   * Toggle hold-button state on right click up\r\n   */\r\n  rightClickUpEvent() {\r\n    this.setState(!this.getState());\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} screenLoc The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, screenLoc) {\r\n    var centerX = screenLoc.x + (BUTTON_RADIUS / 2);\r\n    var centerY = screenLoc.y + (BUTTON_RADIUS / 2);\r\n    var color = (this.getState()) ? 'rgb(0,200,0)' : 'rgb(200,0,0)';\r\n    graphics.beginStroke('rgb(0,0,0)')\r\n      .setStrokeStyle(2)\r\n      .moveTo(centerX, centerY)\r\n      .lineTo(centerX + ((BUTTON_RADIUS / 2) * (3 / 2)), centerY)\r\n      .endStroke()\r\n      .beginFill(color)\r\n      .drawCircle(centerX, centerY, BUTTON_RADIUS / 2)\r\n      .endFill()\r\n      .beginStroke('rgb(0,0,0)')\r\n      .drawCircle(centerX, centerY, BUTTON_RADIUS / 2)\r\n      .endStroke()\r\n      .setStrokeStyle();\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/inputs/hold-button.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/inputs/switch-button.js":
/*!***********************************************************!*\
  !*** ./public/js/lpg/model/types/inputs/switch-button.js ***!
  \***********************************************************/
/*! exports provided: SwitchButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SwitchButton\", function() { return SwitchButton; });\n/* harmony import */ var _misc_connector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _types_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/input */ \"./public/js/lpg/model/types/input.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n// \r\n// Constants\r\n// \r\nconst BUTTON_WIDTH = 20;\r\nconst BUTTON_HEIGHT = 30;\r\nvar slideAmounts = {};\r\n\r\nclass SwitchButton extends _types_input__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] {\r\n\r\n  /**\r\n   * SwitchButton Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds) {\r\n    super('SWITCH-BUTTON', 'INPUT', bounds, true);\r\n\r\n    this.bounds.width = BUTTON_WIDTH;\r\n    this.bounds.height = BUTTON_HEIGHT;\r\n\r\n    var output = new _misc_connector__WEBPACK_IMPORTED_MODULE_0__[\"Connector\"](\r\n      {\r\n        x: this.bounds.x + BUTTON_WIDTH + (BUTTON_WIDTH / 2),\r\n        y: this.bounds.y + (BUTTON_HEIGHT / 2)\r\n      },\r\n      'OUTPUT'\r\n    );\r\n    this.connectors.push(output);\r\n    slideAmounts[this.id] = 0.0;\r\n  }\r\n\r\n  /**\r\n   * Toggle hold-button state on right click down\r\n   */\r\n  rightClickUpEvent() {\r\n    this.setState(!this.getState());\r\n  }\r\n\r\n  /**\r\n   * Set the amount of slide for this switches toggle bar\r\n   * \r\n   * @param {number} amount 0 <= amount <= 1\r\n   */\r\n  setSlideAmount(amount) {\r\n    slideAmounts[this.id] = amount;\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} screenLoc The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, screenLoc) {\r\n    const ON_COLOR = 'rgb(0,200,0)';\r\n    const OFF_COLOR = 'rgb(200,0,0)';\r\n    let me = this;\r\n    let slideAmount = slideAmounts[this.id];\r\n\r\n    const PADDING = 2;\r\n    const HALF_PADDING = PADDING / 2;\r\n    const SWITCH_HEIGHT = this.bounds.height / 2;\r\n\r\n    // Draw output connectors\r\n    this.getOutputConnectors().forEach((conn) => {\r\n      let xDiff = conn.bounds.x - me.bounds.x;\r\n      let yDiff = conn.bounds.y - me.bounds.y;\r\n      graphics\r\n        .beginStroke('rgb(0,0,0)')\r\n        .setStrokeStyle(2)\r\n        .moveTo((screenLoc.x + me.bounds.width), screenLoc.y + yDiff)\r\n        .lineTo(screenLoc.x + xDiff, screenLoc.y + yDiff)\r\n        .endStroke()\r\n        .setStrokeStyle();\r\n    });\r\n\r\n    graphics\r\n      .beginStroke('black')\r\n      .setStrokeStyle(PADDING)\r\n      .drawRect(screenLoc.x, screenLoc.y, this.bounds.width, this.bounds.height)\r\n      .endStroke()\r\n      .setStrokeStyle();\r\n    \r\n    // Draw on color half\r\n    graphics\r\n      .beginFill(ON_COLOR)\r\n      .drawRect(screenLoc.x + (HALF_PADDING), screenLoc.y + (HALF_PADDING), this.bounds.width - PADDING, (this.bounds.height / 2))\r\n      .endFill();\r\n\r\n    // Draw off color half\r\n    graphics\r\n      .beginFill(OFF_COLOR)\r\n      .drawRect(screenLoc.x + (HALF_PADDING), screenLoc.y+ (this.bounds.height / 2), this.bounds.width - PADDING, (this.bounds.height / 2) - HALF_PADDING)\r\n      .endFill();\r\n\r\n    let onLocY = screenLoc.y;\r\n    let offLocY = this.bounds.height - SWITCH_HEIGHT;\r\n\r\n    graphics.beginFill('rgb(0,0,0,0.9)');\r\n\r\n    // Draw \"on\" switch style \r\n    if (this.getState()) {\r\n      graphics\r\n        .drawRect(\r\n          screenLoc.x,\r\n          onLocY + (offLocY * slideAmount),\r\n          this.bounds.width,\r\n          SWITCH_HEIGHT);\r\n    } \r\n    \r\n    // Draw \"off\" switch style\r\n    else {\r\n      graphics\r\n        .drawRect(\r\n          screenLoc.x, \r\n          onLocY + (offLocY * slideAmount), \r\n          this.bounds.width, \r\n          SWITCH_HEIGHT);\r\n    }\r\n\r\n    graphics.endFill();\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/inputs/switch-button.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/misc/connector.js":
/*!*****************************************************!*\
  !*** ./public/js/lpg/model/types/misc/connector.js ***!
  \*****************************************************/
/*! exports provided: Connector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Connector\", function() { return Connector; });\n/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../component */ \"./public/js/lpg/model/component.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n// \r\n// Constants\r\n// \r\nconst RADIUS = 5;\r\n\r\nclass Connector extends _component__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\r\n\r\n  /**\r\n   * Connector Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   * @param {string} type \r\n   */\r\n  constructor(bounds, type) {\r\n    super('CONNECTOR', 'MISC', bounds);\r\n\r\n    this.bounds.width = RADIUS;\r\n    this.bounds.height = RADIUS;\r\n\r\n    this.state = false;\r\n    this.type = type;\r\n    this.connections = [];\r\n  }\r\n\r\n  /**\r\n   * Retrieve different bounds allowing for selection handling to be easier\r\n   */\r\n  getRealBounds() {\r\n    return new createjs.Rectangle(this.bounds.x - RADIUS, this.bounds.y - RADIUS, RADIUS * 2, RADIUS * 2);\r\n  }\r\n\r\n  /**\r\n   * Retrieve connector state information\r\n   * \r\n   * @returns true === on, false === off\r\n   */\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Update the connector state to a new value\r\n   * \r\n   * @param {boolean} newState The newly updated state value\r\n   */\r\n  updateState(newState) {\r\n    this.state = newState;\r\n  }\r\n\r\n  /**\r\n   * Check if this connector is an input connector\r\n   */\r\n  isInput() {\r\n    return this.type === 'INPUT';\r\n  }\r\n\r\n  /**\r\n   * Check if this connector is an output connector\r\n   */\r\n  isOutput() {\r\n    return this.type === 'OUTPUT';\r\n  }\r\n\r\n  /**\r\n   * Retrieve the auto-generated universally unique identifier (uuid)\r\n   *  This is specific to each connector and allows the application to map\r\n   *  connectors to their associated connections.\r\n   */\r\n  getID() {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Establish a connection mapping between this connector and the provided connectors\r\n   * \r\n   * @param {Connector} connector The connector being connected to\r\n   */\r\n  addConnection(connector) {\r\n    this.connections.push(connector.getID());\r\n  }\r\n\r\n  /**\r\n   * Remove the mapping between this connector and the provided connector\r\n   *  This will have no effect if the connector is not mapped\r\n   * \r\n   * @param {Connector} connector The connector being unmapped\r\n   */\r\n  removeConnection(connector) {\r\n    this.connections = this.connections.filter(val => val !== connector.getID());\r\n  }\r\n\r\n  /**\r\n   * Retrieve the list of mapped connections for this connector\r\n   */\r\n  getConnections() {\r\n    return this.connections;\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} screenPos The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, screenLoc) {\r\n    var color = (this.getState()) ? 'rgb(0,200,0)' : 'rgb(200,0,0)';\r\n    graphics.beginFill(color)\r\n      .drawCircle(screenLoc.x, screenLoc.y, this.bounds.width)\r\n      .endFill();\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/misc/connector.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/misc/module.js":
/*!**************************************************!*\
  !*** ./public/js/lpg/model/types/misc/module.js ***!
  \**************************************************/
/*! exports provided: Module */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Module\", function() { return Module; });\n/* harmony import */ var _connector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _types_gate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/gate */ \"./public/js/lpg/model/types/gate.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n// \r\n// Constants\r\n// \r\nconst DEFAULT_LABEL = 'unnamed';\r\nconst EXTERNAL_WIDTH_DEFAULT = 40;\r\nconst EXTERNAL_HEIGHT_DEFAULT = 20;\r\n\r\nclass Module extends _types_gate__WEBPACK_IMPORTED_MODULE_1__[\"Gate\"] {\r\n\r\n  /**\r\n   * Module Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds) {\r\n    super('MODULE', 'MODULE', bounds);\r\n    this.label = DEFAULT_LABEL;\r\n    this.components = [];\r\n    this.startPos = { x: 0, y: 0 };\r\n    this.connectorMap = {};\r\n    this.updateBounds();\r\n    this.updateConnectorMap();\r\n    this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Override propagate functionality\r\n   */\r\n  propagate(activeModule) {\r\n    let me = this;\r\n\r\n    /** \r\n     * Update all inputs based on connected outputs\r\n     *  If any of the states are on, the input state will be in the on state.\r\n     */\r\n    let updateConnections = function(connector) {\r\n      let newState = false;\r\n      connector.getConnections().forEach(connFromID => {\r\n        if (newState) return;\r\n        let connFrom = me.getOutputConnectorFromID(connFromID);\r\n        if (connFrom.getState()) {\r\n          newState = true;\r\n          return;\r\n        }\r\n      });\r\n      \r\n      // Update connectors to match state\r\n      //  false => false, true => true\r\n      if (connector.getState() !== newState) {\r\n        connector.updateState(newState);\r\n\r\n        // Retrieve which component was updated\r\n        let compUpdated = me.getComponent(connector);\r\n\r\n        // Propagate updated gate immediately\r\n        if (compUpdated.isGate()) {\r\n          compUpdated.propagate();\r\n        }\r\n        \r\n        // Propagate module recursively when updated\r\n        else if (compUpdated.type === 'MODULE') {\r\n          // update input components to match state of input connectors              \r\n          let inputComp = compUpdated.getInputComponent(connector);\r\n          inputComp.setState(connector.getState());\r\n          if (!activeModule) {\r\n            me.propagate(false);\r\n          }\r\n        }\r\n\r\n        // Update module outputs when updated\r\n        else if (compUpdated.isOutputComp()) {\r\n          let outputConn = me.getOutputConnector(compUpdated);\r\n          outputConn.updateState(compUpdated.getState());\r\n          compUpdated.stateChangedEvent();\r\n        }\r\n      }\r\n    };\r\n\r\n    // Run each input connector through an update iteration\r\n    this.components.forEach(component => {\r\n      component.getInputConnectors().forEach(connector => {\r\n        updateConnections(connector);\r\n      });\r\n    });\r\n\r\n    // Propagate all of this module's modules'\r\n    this.components.forEach(component => {\r\n      if (component.type === 'MODULE') {\r\n        component.propagate(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update mappings for all output connectors (by ID) to their input connectors (object)\r\n   */\r\n  updateConnectorMap() {\r\n    var me = this;\r\n    this.connectorMap = {};\r\n    this.components.forEach((component) =>  {\r\n      component.getInputConnectors().forEach((connector) =>  {\r\n        var connectorID = connector.getID();\r\n        me.connectorMap[connectorID] = [];\r\n        connector.getConnections().forEach((connFromID) =>  {\r\n          var connFrom = me.getConnector(connFromID);\r\n          if (connFrom !== null) {\r\n            me.connectorMap[connectorID].push(connFrom);\r\n          }\r\n        });\r\n      });\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Retrieve an instance of the current connector mappings\r\n   */\r\n  getConnectorMap() {\r\n    return this.connectorMap;\r\n  }\r\n\r\n  /**\r\n   * Add a component to this module\r\n   * \r\n   * @param {*} component The component being added\r\n   */\r\n  addComponent(component) {\r\n    this.components.push(component);\r\n\r\n    // If the component is an input, add input connector associated\r\n    if (component.isInputComp()) {\r\n      this.connectors.push(new _connector__WEBPACK_IMPORTED_MODULE_0__[\"Connector\"]({ x: this.bounds.x, y: this.bounds.y }, 'INPUT'));\r\n    }\r\n\r\n    // If the component is an output, add output connector associated\r\n    else if (component.isOutputComp()) {\r\n      this.connectors.push(new _connector__WEBPACK_IMPORTED_MODULE_0__[\"Connector\"]({ x: this.bounds.x, y: this.bounds.y }, 'OUTPUT'));\r\n    }\r\n\r\n    this.updateBounds();\r\n\r\n    return component;\r\n  }\r\n\r\n  /**\r\n   * Remove a component from this module\r\n   * \r\n   * @param {*} component The component being removed\r\n   */\r\n  removeComponent(component) {\r\n    let associatedConn = null;\r\n\r\n    // If the component was an input, remove input connector associated\r\n    if (component.isInputComp()) {\r\n      associatedConn = this.getInputConnector(component);\r\n    }\r\n\r\n    // If the component was an output, remove the output connector associated\r\n    else if (component.isOutputComp()) {\r\n      associatedConn = this.getOutputConnector(component);\r\n    }\r\n\r\n    // Filter module's components to remove desired component\r\n    this.components = this.components.filter(comp => comp !== component);\r\n    this.connectors = this.connectors.filter(conn => conn !== associatedConn);\r\n\r\n    // Filter module's components connector's to remove mapped connection\r\n    this.components.forEach((comp) => {\r\n      comp.getConnectors().forEach((conn) => {\r\n        component.getConnectors().forEach((connector) => {\r\n          conn.removeConnection(connector);\r\n        });\r\n      });\r\n    });\r\n\r\n    this.updateBounds();\r\n  }\r\n\r\n  /**\r\n   * Retreive all Input-type components that are children of this module\r\n   */\r\n  getInputComponents() {\r\n    let inputs = [];\r\n    this.components.forEach((comp) => {\r\n      if (comp.isInputComp()) {\r\n        inputs.push(comp);\r\n      }\r\n    });\r\n    return inputs;\r\n  }\r\n\r\n  /**\r\n   * Retrieve all Output-type components that are children of this module\r\n   */\r\n  getOutputComponents() {\r\n    let outputs = [];\r\n    this.components.forEach((comp) => {\r\n      if (comp.isOutputComp()) {\r\n        outputs.push(comp);\r\n      }\r\n    });\r\n    return outputs;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the input component from this module that is associated with this connector\r\n   * \r\n   * @param {*} connector The connector associated with the input component\r\n   */\r\n  getInputComponent (connector) {\r\n    let connIndex = this.getInputConnectors().indexOf(connector);\r\n    return this.getInputComponents()[connIndex];\r\n  }\r\n\r\n  /**\r\n   * Retrieve the output component from this module that is associated with this connector\r\n   * \r\n   * @param {*} connector The connector associated with the output component\r\n   */\r\n  getOutputComponent (connector) {\r\n    let connIndex = this.getOutputConnectors().indexOf(connector);\r\n    return this.getOutputComponents()[connIndex];\r\n  }\r\n\r\n  /**\r\n   * Retrieve the input connector instance associated with the desired component\r\n   * \r\n   * @param {*} component The component associated with the desired connector\r\n   */\r\n  getInputConnector(component) {\r\n    let result = null;\r\n\r\n    if (component.isInputComp()) {\r\n      let inputIndex = this.getInputComponents().indexOf(component);\r\n      return this.getInputConnectors()[inputIndex];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the input connector instance associated with the desired component\r\n   * \r\n   * @param {*} component The component associated with the desired connector\r\n   */\r\n  getOutputConnector(component) {\r\n    let result = null;\r\n\r\n    if (component.isOutputComp()) {\r\n      let outputIndex = this.getOutputComponents().indexOf(component);\r\n      return this.getOutputConnectors()[outputIndex];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Retrieve a connector by it's associated UUID\r\n   * \r\n   * @param {string} connID The associated connector ID\r\n   */\r\n  getConnector(connID) {\r\n    let result = null;\r\n    this.components.forEach((component) =>  {\r\n      if (result !== null) return;\r\n      component.getConnectors().forEach((connector) => {\r\n        if (connector.getID() === connID) {\r\n          result = connector;\r\n          return;\r\n        }\r\n      });\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Retrieve an output connector instance by it's associated UUID\r\n   * \r\n   * @param {string} connID The associated connector ID\r\n   */\r\n  getOutputConnectorFromID(connID) {\r\n    let result = null;\r\n    this.components.forEach((component) =>  {\r\n      if (result !== null) return;\r\n      component.getOutputConnectors().forEach((outConn) => {\r\n        if (outConn.getID() === connID) {\r\n          result = outConn;\r\n          return;\r\n        }\r\n      });\r\n    });\r\n    return result;\r\n  }\r\n  \r\n  /**\r\n   * Retrieve an input connector instance by it's associated UUID\r\n   * \r\n   * @param {string} connID The associated connector ID\r\n   */\r\n  getInputConnectorFromID(connID) {\r\n    let result = null;\r\n    this.components.forEach((component) =>  {\r\n      if (result !== null) return;\r\n      component.getInputConnectors().forEach((inConn) => {\r\n        if (inConn.getID() === connID) {\r\n          result = inConn;\r\n          return;\r\n        }\r\n      });\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Retrieve an instance of a Component by one of it's connector instances\r\n   * \r\n   * @param {Component} connector The connector associated with the Component\r\n   */\r\n  getComponent(connector) {\r\n    let result = null;\r\n    this.components.forEach((component) => {\r\n      if (result !== null) return false;\r\n      component.getConnectors().forEach((conn) => {\r\n        if (connector.getID() === conn.getID()) {\r\n          result = component;\r\n          return false;\r\n        }\r\n      });\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Update the module bounds to properly fit all connectors\r\n   *  After bounds are resized, update connectors positions to properly fit bounds\r\n   */\r\n  updateBounds() {\r\n    let maxSideConns = (this.getInputConnectors().length < this.getOutputConnectors().length)\r\n      ? this.getOutputConnectors().length\r\n      : this.getInputConnectors().length;\r\n\r\n    // Update width and height based on connector amount\r\n    this.bounds = new createjs.Rectangle(\r\n      this.bounds.x,\r\n      this.bounds.y,\r\n      EXTERNAL_WIDTH_DEFAULT,\r\n      EXTERNAL_HEIGHT_DEFAULT * (maxSideConns + 1));\r\n\r\n    let connPadding = 10;\r\n    let me = this;\r\n\r\n    // Update input connector locations\r\n    this.getInputConnectors().forEach((conn) => {\r\n      let gapLength = me.bounds.height / (me.getInputConnectors().length + 1);\r\n      let index = me.getInputConnectors().indexOf(conn);\r\n      conn.bounds.x = me.bounds.x - connPadding;\r\n      conn.bounds.y = me.bounds.y + (gapLength * (index + 1));\r\n    });\r\n\r\n    // Update output connector locations\r\n    this.getOutputConnectors().forEach((conn) => {\r\n      let gapLength = me.bounds.height / (me.getOutputConnectors().length + 1);\r\n      let index = me.getOutputConnectors().indexOf(conn);\r\n      conn.bounds.x = me.bounds.x + me.bounds.width + connPadding;\r\n      conn.bounds.y = me.bounds.y + (gapLength * (index + 1));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} screenPos The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, screenPos) {\r\n    let baseColor = 'rgba(0,0,0,0.8)';\r\n    let me = this;\r\n\r\n    graphics\r\n      // Base Color fill\r\n      .beginFill(baseColor)\r\n\r\n      // Outline Stroke\r\n      .beginStroke('rgb(0,0,0)')\r\n      .setStrokeStyle(2)\r\n      .drawRect(screenPos.x, screenPos.y, this.bounds.width, this.bounds.height)\r\n      .endStroke()\r\n      .endFill()\r\n      .setStrokeStyle();\r\n\r\n    // Draw input connectors\r\n    this.getInputConnectors().forEach((conn) => {\r\n      let xDiff = me.bounds.x - conn.bounds.x;\r\n      let yDiff = conn.bounds.y - me.bounds.y;\r\n      graphics\r\n        .beginStroke('rgb(0,0,0)')\r\n        .setStrokeStyle(2)\r\n        .moveTo(screenPos.x - xDiff, screenPos.y + yDiff)\r\n        .lineTo(screenPos.x, screenPos.y + yDiff)\r\n        .endStroke()\r\n        .setStrokeStyle();\r\n    });\r\n\r\n    // Draw output connectors\r\n    this.getOutputConnectors().forEach((conn) => {\r\n      let xDiff = conn.bounds.x - me.bounds.x;\r\n      let yDiff = conn.bounds.y - me.bounds.y;\r\n      graphics\r\n        .beginStroke('rgb(0,0,0)')\r\n        .setStrokeStyle(2)\r\n        .moveTo((screenPos.x + me.bounds.width), screenPos.y + yDiff)\r\n        .lineTo(screenPos.x + xDiff, screenPos.y + yDiff)\r\n        .endStroke()\r\n        .setStrokeStyle();\r\n    });\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/misc/module.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/output.js":
/*!*********************************************!*\
  !*** ./public/js/lpg/model/types/output.js ***!
  \*********************************************/
/*! exports provided: Output */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Output\", function() { return Output; });\n/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component */ \"./public/js/lpg/model/component.js\");\n// \r\n// Includes\r\n// \r\n \r\n\r\nclass Output extends _component__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\r\n\r\n  /**\r\n   * Construct an Output-type component\r\n   * \r\n   * @param {string} type \r\n   * @param {string} superType \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(type, superType, bounds) {\r\n    super(type, superType, bounds);\r\n  }\r\n\r\n  /**\r\n   * Set the state of this output component\r\n   * \r\n   * @param {boolean} newState \r\n   */\r\n  setState(newState) {\r\n    return this.connectors[0].updateState(newState);\r\n  }\r\n\r\n  /**\r\n   * Get the state of this output component\r\n   * \r\n   * @returns {boolean} The state of the component \r\n   */\r\n  getState() {\r\n    return this.connectors[0].getState();\r\n  }\r\n\r\n  /**\r\n   * Perform an action when the state is changed\r\n   */\r\n  stateChangedEvent() {}\r\n\r\n  /**\r\n   * Output Component settings loader\r\n   * \r\n   * @param elem The DOM element the settings are being loaded into\r\n   */\r\n  loadSettings(elem) {\r\n    super.loadSettings(elem);\r\n    let me = this;\r\n    let labelControlID = 'label-control';\r\n    let labelControlHTML = '<button id=\"' + labelControlID + '\" type=\"button\">Set Label</button>'; \r\n    elem.append(labelControlHTML);\r\n    $('#' + labelControlID).addClass('controls');\r\n    $('#' + labelControlID).on('click', () => {\r\n      let newLabel = prompt('Enter new label:', me.label);\r\n      me.label = (newLabel === null) ? me.label : newLabel;\r\n    });\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/output.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/outputs/console.js":
/*!******************************************************!*\
  !*** ./public/js/lpg/model/types/outputs/console.js ***!
  \******************************************************/
/*! exports provided: Console */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Console\", function() { return Console; });\n/* harmony import */ var _misc_connector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _types_output__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/output */ \"./public/js/lpg/model/types/output.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n// \r\n// Constants\r\n// \r\nconst CONSOLE_DIM = 25;\r\n\r\nclass Console extends _types_output__WEBPACK_IMPORTED_MODULE_1__[\"Output\"] {\r\n\r\n  /**\r\n   * Console Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds) {\r\n    super('CONSOLE', 'OUTPUT', bounds);\r\n\r\n    this.bounds.width = CONSOLE_DIM;\r\n    this.bounds.height = CONSOLE_DIM;\r\n\r\n    var output = new _misc_connector__WEBPACK_IMPORTED_MODULE_0__[\"Connector\"](\r\n      {\r\n        x: this.bounds.x - (this.bounds.width / 2),\r\n        y: this.bounds.y + (this.bounds.height / 2)\r\n      },\r\n      'INPUT'\r\n    );\r\n    this.connectors.push(output);\r\n  }\r\n\r\n  // loadStateImage(callback) {\r\n\r\n  // }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} screenLoc The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, screenLoc) {\r\n    // var centerX = screenLoc.x + (this.bounds.width / 2);\r\n    var centerY = screenLoc.y + (this.bounds.height / 2);\r\n    var baseColor = 'rgba(0,0,0,0.8)';\r\n\r\n    // Connector Stroke\r\n    graphics.beginStroke('rgb(0,0,0)')\r\n      .setStrokeStyle(2)\r\n      .moveTo(screenLoc.x, centerY)\r\n      .lineTo(screenLoc.x - (this.bounds.width / 2), centerY)\r\n      .endStroke()\r\n\r\n      // Base Color fill\r\n      .beginFill(baseColor)\r\n\r\n      // Outline Stroke\r\n      .beginStroke('rgb(0,0,0)')\r\n      .setStrokeStyle(2)\r\n      .drawRect(screenLoc.x, screenLoc.y, this.bounds.width, this.bounds.height)\r\n      .endStroke()\r\n      .endFill()\r\n      .setStrokeStyle();\r\n\r\n    // Draw state text\r\n    const stateToBinary = (this.getState()) ? '1' : '0';\r\n    const textStyle = 'bold 20px Courier';\r\n    const fontColor = (this.getState()) ? 'rgb(0,255,0)' : 'rgb(255,0,0)';\r\n    var stateText = new createjs.Text(stateToBinary, textStyle, fontColor);\r\n    stateText.cache(0, 0, this.bounds.width, this.bounds.height);\r\n\r\n    var tmpTextImage = new Image(this.bounds.width, this.bounds.height);\r\n    tmpTextImage.src = stateText.bitmapCache.getCacheDataURL();\r\n\r\n    // create and translate matrix to offset comp's x and y\r\n    var matrix = new createjs.Matrix2D();\r\n    matrix.translate(\r\n      (screenLoc.x + (this.bounds.width / 2)) - (stateText.getMeasuredWidth() / 2),\r\n      ((screenLoc.y + (this.bounds.height / 2)) - (stateText.getMeasuredLineHeight() / 2))\r\n    );\r\n\r\n    graphics.beginBitmapFill(tmpTextImage, 'repeat', matrix)\r\n      .drawRect(screenLoc.x, screenLoc.y, this.bounds.width, this.bounds.height)\r\n      .endFill();\r\n  }\r\n\r\n  /**\r\n   * Override state changed event\r\n   */\r\n  stateChangedEvent() {\r\n    console.log(this.label + ':' + this.getState());\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/outputs/console.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/outputs/led.js":
/*!**************************************************!*\
  !*** ./public/js/lpg/model/types/outputs/led.js ***!
  \**************************************************/
/*! exports provided: LED */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LED\", function() { return LED; });\n/* harmony import */ var _misc_connector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _types_output__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/output */ \"./public/js/lpg/model/types/output.js\");\n// \r\n// Includes\r\n// \r\n\r\n\r\n\r\n// \r\n// Constants\r\n// \r\nconst LED_RADIUS = 25;\r\nconst DEFAULT_COLOR = '#00FF00';\r\n\r\nclass LED extends _types_output__WEBPACK_IMPORTED_MODULE_1__[\"Output\"] {\r\n\r\n  /**\r\n   * LED Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds) {\r\n    super('LED', 'OUTPUT', bounds);\r\n\r\n    this.bounds.width = LED_RADIUS;\r\n    this.bounds.height = LED_RADIUS;\r\n    this.color = (this.color) ? this.color : DEFAULT_COLOR;\r\n\r\n    var output = new _misc_connector__WEBPACK_IMPORTED_MODULE_0__[\"Connector\"](\r\n      {\r\n        x: this.bounds.x - ((LED_RADIUS / 2) * (2 / 3)),\r\n        y: this.bounds.y + (LED_RADIUS / 2)\r\n      },\r\n      'INPUT');\r\n    this.connectors.push(output);\r\n  }\r\n\r\n  /**\r\n   * Modify a color value to lighten/darken it\r\n   * \r\n   * @param {string} col The color value being modified \r\n   * @param {number} amt The percent amount to modify the color by\r\n   */\r\n  lightenDarkenColor(col, amt) {\r\n    var usePound = false;\r\n    if ((usePound = (col[0] === '#'))) {\r\n      col = col.slice(1);\r\n    }\r\n\r\n    let clampRGB = function(val) {\r\n      return Math.ceil((val > 255) ? 255 : ((val < 0) ? 0 : val));\r\n    };\r\n\r\n    var num = parseInt(col, 16);\r\n\r\n    var r = ((num >> 16) & 0xFF) * amt;\r\n    var g = ((num >>  8) & 0xFF) * amt;\r\n    var b = ((num >>  0) & 0xFF) * amt;\r\n    \r\n    r = clampRGB(r);\r\n    g = clampRGB(g);\r\n    b = clampRGB(b);\r\n\r\n    return (usePound ? '#' : '') + String('000000' + ((r << 16) | (g << 8) | b).toString(16)).slice(-6);\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} screenLoc The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, screenLoc) {\r\n    var centerX = screenLoc.x + (LED_RADIUS / 2);\r\n    var centerY = screenLoc.y + (LED_RADIUS / 2);\r\n    var halfColor = this.lightenDarkenColor(this.color, 0.5);\r\n    var qtrColor = this.lightenDarkenColor(this.color, 0.25);\r\n    var baseColor = (this.getState()) ? halfColor : qtrColor;\r\n    var lightColor = (this.getState()) ? this.color : halfColor;\r\n    var lightRatios = [1, 0];\r\n    // Connector Stroke\r\n    graphics.beginStroke('rgb(0,0,0)')\r\n      .setStrokeStyle(2)\r\n      .moveTo(centerX, centerY)\r\n      .lineTo(centerX - ((LED_RADIUS / 2) * (3 / 2)), centerY)\r\n      .endStroke()\r\n      // Base Color fill\r\n      .beginFill(baseColor)\r\n      .drawCircle(centerX, centerY, LED_RADIUS / 2)\r\n      .endFill()\r\n      // Light Color fill\r\n      .beginRadialGradientFill(['rgba(0,0,0,0)', lightColor], lightRatios, centerX, centerY, 0, centerX, centerY, LED_RADIUS)\r\n      .drawCircle(centerX, centerY, LED_RADIUS / 2)\r\n      .endFill()\r\n      // Outline Stroke\r\n      .beginStroke('rgb(0,0,0)')\r\n      .setStrokeStyle(1)\r\n      .drawCircle(centerX, centerY, LED_RADIUS / 2)\r\n      .endStroke()\r\n      .setStrokeStyle();\r\n  }\r\n\r\n  /**\r\n   * LED Component settings loader\r\n   * \r\n   * @param elem The DOM element the settings are being loaded into\r\n   */\r\n  loadSettings(elem) {\r\n    super.loadSettings(elem);\r\n    let me = this;\r\n    let colorPickerID = 'led-color-picker';\r\n    let colorControlID = 'led-color-control';\r\n    let colorPickerHTML = '<input id=\"' + colorPickerID + '\" type=\"color\" style=\"display:none;\">';\r\n    let colorControlHTML = '<input id=\"' + colorControlID + '\" type=\"button\" value=\"Set Color\" style=\"color:' + this.color + ';\">';\r\n    \r\n    elem.append(colorPickerHTML);\r\n    elem.append(colorControlHTML);\r\n    $('#' + colorControlID).addClass('controls');\r\n\r\n    $('#' + colorControlID).on('click', () => {\r\n      $('#' + colorPickerID).get(0).dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, view: window }));\r\n    });\r\n\r\n    $('#' + colorPickerID).on('change', (event) => {\r\n      me.color = event.target.value;\r\n      $('#' + colorControlID).css('color', me.color);\r\n    });\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/outputs/led.js?");

/***/ }),

/***/ "./public/js/lpg/model/types/outputs/seven-seg-disp.js":
/*!*************************************************************!*\
  !*** ./public/js/lpg/model/types/outputs/seven-seg-disp.js ***!
  \*************************************************************/
/*! exports provided: SevenSegDisp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SevenSegDisp\", function() { return SevenSegDisp; });\n/* harmony import */ var _misc_connector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/connector */ \"./public/js/lpg/model/types/misc/connector.js\");\n/* harmony import */ var _types_output__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/output */ \"./public/js/lpg/model/types/output.js\");\n// \r\n// Includes\r\n//\r\n\r\n\r\n\r\n// \r\n// Constants\r\n// \r\nconst WIDTH = 60;\r\nconst HEIGHT = 100;\r\n\r\nvar hoveredConnector = null;\r\n\r\nclass SevenSegDisp extends _types_output__WEBPACK_IMPORTED_MODULE_1__[\"Output\"] {\r\n\r\n  /**\r\n   * SevenSegDisp Constructor\r\n   * \r\n   * @param {createjs.Rectangle} bounds \r\n   */\r\n  constructor(bounds) {\r\n    super('SEVEN-SEG-DISP', 'OUTPUT', bounds);\r\n\r\n    this.bounds.width = WIDTH;\r\n    this.bounds.height = HEIGHT;\r\n\r\n    // Add 7 input connectors\r\n    var yOff = (this.bounds.height / 7) / 2;\r\n    var x = this.bounds.x - (this.bounds.width / 5);\r\n\r\n    for (var i = 0; i < 7; i++) {\r\n      var y = this.bounds.y + yOff + ((this.bounds.height / 7) * i);\r\n      var conn = new _misc_connector__WEBPACK_IMPORTED_MODULE_0__[\"Connector\"](new createjs.Rectangle(x, y, 0, 0), 'INPUT');\r\n      this.connectors.push(conn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve the state of a specific connector based on it's index\r\n   * \r\n   * @param {number} connIndex The index used to retrieve the Connector\r\n   */\r\n  getStateIndex(connIndex) {\r\n    return this.connectors[connIndex].getState();\r\n  }\r\n\r\n  /**\r\n   * Set the hovered connector to display which segment it's associated with\r\n   * \r\n   * @param {number} connector The connector being hovered\r\n   */\r\n  setHoveredConnector(connector) {\r\n    hoveredConnector = connector;\r\n  }\r\n\r\n  /**\r\n   * Paint the component\r\n   * \r\n   * @param {createjs.Graphics} graphics The graphics object being painted to\r\n   * @param {createjs.Point} screenLoc The canvas location of the paint procedure\r\n   */\r\n  paint(graphics, screenLoc) {\r\n\r\n    const SEG_LENGTH = this.bounds.width * (2 / 3);\r\n    const SEG_HEIGHT = this.bounds.height / 10;\r\n    const SEG_CORNER_DIST = (this.bounds.width / 12);\r\n\r\n    let hovered = (hoveredConnector !== null && this.connectors.includes(hoveredConnector));\r\n\r\n    // Draw connector lines\r\n    var yOff = (this.bounds.height / 7) / 2;\r\n    var x = screenLoc.x - (this.bounds.width / 5);\r\n    for (var i = 0; i < 7; i++) {\r\n      var y = screenLoc.y + yOff + ((this.bounds.height / 7) * i);\r\n      graphics.beginStroke('black')\r\n        .setStrokeStyle(2)\r\n        .moveTo(x, y)\r\n        .lineTo(screenLoc.x, y)\r\n        .setStrokeStyle()\r\n        .endStroke();\r\n    }\r\n\r\n    // Draw background\r\n    graphics.beginStroke('rgba(0,0,0,0.9)')\r\n      .setStrokeStyle(2)\r\n      .beginFill('rgba(0,0,0,0.8)')\r\n      .moveTo(screenLoc.x, screenLoc.y)\r\n      .drawRect(screenLoc.x, screenLoc.y, this.bounds.width, this.bounds.height)\r\n      .setStrokeStyle()\r\n      .endStroke()\r\n      .endFill();\r\n\r\n    // Draw each horizontal segment\r\n    var ySegOff = ((this.bounds.height - (SEG_HEIGHT)) / 2) - (SEG_HEIGHT / 2);\r\n    x = screenLoc.x + ((this.bounds.width / 3) - SEG_HEIGHT);\r\n    for (i = 0; i < 3; i++) {\r\n      y = screenLoc.y + (ySegOff * i) + SEG_HEIGHT;\r\n      var color = (this.getStateIndex(3 * i)) ? 'rgba(0,255,0,0.7)' : 'rgba(255,255,255,0.25)';\r\n      if (hovered && hoveredConnector === this.connectors[3 * i]) {\r\n        color = 'rgba(255,50,255,0.7)';\r\n      }\r\n      graphics.beginFill(color)\r\n        .moveTo(x, y)\r\n        .lineTo(x + SEG_CORNER_DIST, y + (SEG_HEIGHT / 2))\r\n        .lineTo(x + (SEG_LENGTH - SEG_CORNER_DIST), y + (SEG_HEIGHT / 2))\r\n        .lineTo(x + SEG_LENGTH, y)\r\n        .lineTo(x + (SEG_LENGTH - SEG_CORNER_DIST), y - (SEG_HEIGHT / 2))\r\n        .lineTo(x + SEG_CORNER_DIST, y - (SEG_HEIGHT / 2))\r\n        .lineTo(x, y)\r\n        .endFill();\r\n    }\r\n\r\n    // Draw each vertical segment\r\n    var baseX = screenLoc.x + ((this.bounds.width / 3) - SEG_HEIGHT);\r\n    var baseY = screenLoc.y + SEG_HEIGHT;\r\n    for (i = 0; i < 4; i++) {\r\n      x = (i % 2 !== 0) ? baseX : (baseX + SEG_LENGTH);\r\n      y = (i < 2) ? baseY : (baseY + SEG_LENGTH);\r\n      var index = (i == 0) ? 1 : (i == 1) ? 2 : (i == 2) ? 4 : (i == 3) ? 5 : -1;\r\n      color = (this.getStateIndex(index)) ? 'rgba(0,255,0,0.7)' : 'rgba(255,255,255,0.25)';\r\n      if (hovered && hoveredConnector === this.connectors[index]) {\r\n        color = 'rgba(255,50,255,0.7)';\r\n      }\r\n      graphics.beginFill(color)\r\n        .moveTo(x, y)\r\n        .lineTo(x + (SEG_HEIGHT / 2), y + SEG_CORNER_DIST)\r\n        .lineTo(x + (SEG_HEIGHT / 2), y + (SEG_LENGTH - SEG_CORNER_DIST))\r\n        .lineTo(x, y + SEG_LENGTH)\r\n        .lineTo(x - (SEG_HEIGHT / 2), y + (SEG_LENGTH - SEG_CORNER_DIST))\r\n        .lineTo(x - (SEG_HEIGHT / 2), y + SEG_CORNER_DIST)\r\n        .lineTo(x, y)\r\n        .endFill();\r\n    }\r\n  }\r\n}\n\n//# sourceURL=webpack:///./public/js/lpg/model/types/outputs/seven-seg-disp.js?");

/***/ })

/******/ });